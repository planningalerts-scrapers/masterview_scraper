---
http_interactions:
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '133'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; path=/; HttpOnly; SameSite=Lax
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:18:00 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 f1d7bef7d2e148025cea4670117d1f4a.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - h1UNniog0TIQQ5_u1BKP5F3KV8cF_5LRDYDbpYtkETf-aByJ0g20oA==
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '14203'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:18:00 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 23bcdd719bfa269e077f081512f9c624.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - qH4YnqOAblKQBsVJzUByJF4QFy4Uvzt6Hgk1zitPn5jDkagCUYc7mQ==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: post
    uri: https://da.bundaberg.qld.gov.au/Home/DisclaimerProcessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera
      Host:
      - da.bundaberg.qld.gov.au
      Referer:
      - https://da.bundaberg.qld.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '118'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Location:
      - "/"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:18:00 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 e0cb6c9d540bf5ec954ac9d625103a85.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - 49xUgWmzJYViF6uj43gAZcDRUduq7-tEMdwVWmyPKqxp1WEujFGcMQ==
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/\">here</a>.</h2>\r\n</body></html>\r\n"
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Referer:
      - https://da.bundaberg.qld.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '22749'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:18:00 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 23bcdd719bfa269e077f081512f9c624.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - j3w6CyAm19SZL3EDy5NtVxUO5oUj5v93MeT_ZWMQuv6WMt5Pu1UbLw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: post
    uri: https://da.bundaberg.qld.gov.au/Application/GetApplications
    body:
      encoding: UTF-8
      string: start=0&length=100&json=%7B%22DateFrom%22%3A%2214%2F04%2F2019%22%2C%22DateTo%22%3A%2214%2F05%2F2019%22%2C%22DateType%22%3A%221%22%2C%22RemoveUndeterminedApplications%22%3Afalse%2C%22ShowOutstandingApplications%22%3Afalse%2C%22ShowExhibitedApplications%22%3Afalse%2C%22IncludeDocuments%22%3Afalse%7D
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Referer:
      - https://da.bundaberg.qld.gov.au/
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '298'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=utf-8
      Content-Length:
      - '8255'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:18:03 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 291933b5bb7fbb03efd999a83bb9696a.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - ZGod5tEmUqObnrbTG3Jxfl4AynHQOP-Vt9i_S_mU5JSEaFhly9BI2Q==
    body:
      encoding: UTF-8
      string: '{"draw":null,"recordsTotal":34,"recordsFiltered":34,"data":[["522.2019.00000145.001","522.2019.145.1","Material
        Change of Use","07/05/2019","River Springs Dr, Avoca 4670 QLD \u003cbr/\u003e\u003cb\u003eRelocatable
        Home Park (163 sites) and Residential Care Facility\u003c/b\u003e"],["521.2019.00000108.001","521.2019.108.1","Reconfiguring
        a Lot","30/04/2019","Causeway Dr, Bargara 4670 QLD \u003cbr/\u003e\u003cb\u003eSubdivision
        (1 lot into 32 lots)\u003c/b\u003e"],["526.2019.00000120.001","526.2019.120.1","Change
        Application","15/04/2019","15 Aviation Cres, Kensington 4670 QLD \u003cbr/\u003e17
        Aviation Cres, Kensington 4670 QLD \u003cbr/\u003e20 Aviation Cres, Kensington
        4670 QLD \u003cbr/\u003e22 Airport Dr, Kensington 4670 QLD \u003cbr/\u003e24
        Airport Dr, Kensington 4670 QLD \u003cbr/\u003e24 Aviation Cres, Kensington
        4670 QLD \u003cbr/\u003e26 Aviation Cres, Kensington 4670 QLD \u003cbr/\u003e28
        Aviation Cres, Kensington 4670 QLD \u003cbr/\u003eAirport Dr, Kensington 4670
        QLD \u003cbr/\u003eAviation Cres, Kensington 4670 QLD \u003cbr/\u003e\u003cb\u003eMinor
        Change - Aerospace Precinct\u003c/b\u003e"],["523.2019.00000110.001","523.2019.110.1","Operational
        Works","16/04/2019","15 Aviation Cres, Kensington 4670 QLD \u003cbr/\u003e17
        Aviation Cres, Kensington 4670 QLD \u003cbr/\u003e20 Aviation Cres, Kensington
        4670 QLD \u003cbr/\u003e22 Airport Dr, Kensington 4670 QLD \u003cbr/\u003e24
        Airport Dr, Kensington 4670 QLD \u003cbr/\u003e24 Aviation Cres, Kensington
        4670 QLD \u003cbr/\u003e26 Aviation Cres, Kensington 4670 QLD \u003cbr/\u003e28
        Aviation Cres, Kensington 4670 QLD \u003cbr/\u003eAirport Dr, Kensington 4670
        QLD \u003cbr/\u003eAviation Cres, Kensington 4670 QLD \u003cbr/\u003e\u003cb\u003eBulk
        Earthworks (RFDS)\u003c/b\u003e"],["522.2019.00000144.001","522.2019.144.1","Material
        Change of Use","02/05/2019","35 Nicolsons Rd, Sharon 4670 QLD \u003cbr/\u003eNicolsons
        Rd, Sharon 4670 QLD \u003cbr/\u003e\u003cb\u003eRural Industry (Packing Shed)\u003c/b\u003e"],["521.2019.00000110.001","521.2019.110.1","Reconfiguring
        a Lot","14/05/2019","12 Parker St, Millbank 4670 QLD \u003cbr/\u003e\u003cb\u003eSubdivision
        (1 lot into 2 lots)\u003c/b\u003e"],["523.2019.00000111.001","523.2019.111.1","Operational
        Works","14/05/2019","46 Targo St, Bundaberg Central 4670 QLD \u003cbr/\u003e48
        Targo St, Bundaberg Central 4670 QLD \u003cbr/\u003e\u003cb\u003eCivil Work
        - Demolition of Existing Buildings \u0026 Construction\u003c/b\u003e"],["526.2019.00000124.001","526.2019.124.1","Change
        Application","13/05/2019","210 Mailmans Rd, Monduran 4671 QLD \u003cbr/\u003eLesters
        Rd, Monduran 4671 QLD \u003cbr/\u003eMonduran Rd, Monduran 4671 QLD \u003cbr/\u003e\u003cb\u003eMinor
        Change - Extractive Industry Use\u003c/b\u003e"],["522.2019.00000142.001","522.2019.142.1","Material
        Change of Use","18/04/2019","6 Mandi Ct, Kalkie 4670 QLD \u003cbr/\u003e\u003cb\u003eDual
        Occupancy\u003c/b\u003e"],["526.2019.00000119.001","526.2019.119.1","Change
        Application","15/04/2019","Watchbell St, Innes Park 4670 QLD \u003cbr/\u003e\u003cb\u003eMinor
        - Reconfiguring a Lot for 29 Residential Lots\u003c/b\u003e"],["525.2019.00000014.001","525.2019.14.1","Combined
        (MCU, RL, OW)","07/05/2019","33 Gordons Rd, Alloway 4670 QLD \u003cbr/\u003eWises
        Rd, Alloway 4670 QLD \u003cbr/\u003e\u003cb\u003eRural Industry (Macadamia
        Processing Facility) \u0026 Boundary Realignment\u003c/b\u003e"],["526.2019.00000123.001","526.2019.123.1","Change
        Application","13/05/2019","59 Johanna Bvd, Kensington 4670 QLD \u003cbr/\u003e\u003cb\u003eMinor
        Change (MCU - Community Activity (Children\u0027s Indoor Recreation\u003c/b\u003e"],["532.2019.00000574.001","532.2019.574.1","Concurrence
        Agency Assessment","23/04/2019","58 Croft St, Bargara 4670 QLD \u003cbr/\u003e\u003cb\u003eAmenity
        \u0026 Aesthetics (Shed)\u003c/b\u003e"],["521.2019.00000109.001","521.2019.109.1","Reconfiguring
        a Lot","13/05/2019","15 Sergiacomi St, Gooburrum 4670 QLD \u003cbr/\u003e\u003cb\u003eSubdivision
        (One Lot into Three Lots plus Balance Lot)\u003c/b\u003e"],["526.2019.00000122.001","526.2019.122.1","Change
        Application","01/05/2019","115 Takalvan St, Avoca 4670 QLD \u003cbr/\u003e\u003cb\u003eMinor
        Change (MCU - Car Wash)\u003c/b\u003e"],["532.2019.00000577.001","532.2019.577.1","Concurrence
        Agency Assessment","29/04/2019","105 Lamb St, Walkervale 4670 QLD \u003cbr/\u003e\u003cb\u003eAmenity
        \u0026 Aesthetics (Shed)\u003c/b\u003e"],["532.2019.00000581.001","532.2019.581.1","Concurrence
        Agency Assessment","02/05/2019","10 Blue Sea Ct, Bargara 4670 QLD \u003cbr/\u003e\u003cb\u003eDesign
        \u0026 Siting (Dwelling)\u003c/b\u003e"],["532.2019.00000572.001","532.2019.572.1","Concurrence
        Agency Assessment","18/04/2019","65 Gooburrum Rd, Gooburrum 4670 QLD \u003cbr/\u003e\u003cb\u003eDesign
        \u0026 Siting and Amenity \u0026 Aesthetics (Class 10 Shed)\u003c/b\u003e"],["532.2019.00000582.001","532.2019.582.1","Concurrence
        Agency Assessment","09/05/2019","Lovers Walk, Woongarra 4670 QLD \u003cbr/\u003e\u003cb\u003eDesign
        \u0026 Siting (Shed)\u003c/b\u003e"],["532.2019.00000578.001","532.2019.578.1","Concurrence
        Agency Assessment","30/04/2019","15 Amaroo Cres, Innes Park 4670 QLD \u003cbr/\u003e\u003cb\u003eDesign
        \u0026 Siting \u0026 Amenity \u0026 Aesthetics (Shed)\u003c/b\u003e"],["532.2019.00000571.001","532.2019.571.1","Concurrence
        Agency Assessment","17/04/2019","20 Lorikeet Ave, Woodgate 4660 QLD \u003cbr/\u003e\u003cb\u003eDesign
        \u0026 Siting\u003c/b\u003e"],["532.2019.00000580.001","532.2019.580.1","Concurrence
        Agency Assessment","02/05/2019","725 Moore Park Rd, Welcome Creek 4670 QLD
        \u003cbr/\u003e\u003cb\u003eDesign \u0026 Siting (Shed)\u003c/b\u003e"],["521.2019.00000107.001","521.2019.107.1","Reconfiguring
        a Lot","16/04/2019","390A Rosedale Rd, Meadowvale 4670 QLD \u003cbr/\u003e8
        Meadowvale Rd, Meadowvale 4670 QLD \u003cbr/\u003e\u003cb\u003eBoundary Realignment
        (2 lots into 2 lots)\u003c/b\u003e"],["532.2019.00000579.001","532.2019.579.1","Concurrence
        Agency Assessment","02/05/2019","578 Branyan Dr, Branyan 4670 QLD \u003cbr/\u003e\u003cb\u003eAmenity
        \u0026 Aesthetics (Extension to Class 10 Shed)\u003c/b\u003e"],["532.2019.00000576.001","532.2019.576.1","Concurrence
        Agency Assessment","26/04/2019","67 Walkers Rd, South Bingera 4670 QLD \u003cbr/\u003e\u003cb\u003eAmenity
        and Aesthetics and Security Assessment (Relocate Dwelling)\u003c/b\u003e"],["532.2019.00000573.001","532.2019.573.1","Concurrence
        Agency Assessment","18/04/2019","15 Osprey Dr, Woodgate 4660 QLD \u003cbr/\u003e\u003cb\u003eAmenity
        \u0026 Aesthetics and Design \u0026 Siting (Extension to Existing Shed)\u003c/b\u003e"],["532.2019.00000569.001","532.2019.569.1","Concurrence
        Agency Assessment","17/04/2019","65 Park Estate Dr, Branyan 4670 QLD \u003cbr/\u003e\u003cb\u003eAmenity
        \u0026 Aesthetics - Shed\u003c/b\u003e"],["522.2019.00000143.001","522.2019.143.1","Material
        Change of Use","26/04/2019","9 Breeze Dr, Bargara 4670 QLD \u003cbr/\u003e\u003cb\u003eDual
        Occupancy\u003c/b\u003e"],["532.2019.00000575.001","532.2019.575.1","Concurrence
        Agency Assessment","29/04/2019","42 Hunter St, Burnett Heads 4670 QLD \u003cbr/\u003e\u003cb\u003eAmenity
        \u0026 Aesthetics (2 x Carports)\u003c/b\u003e"],["532.2019.00000567.001","532.2019.567.1","Concurrence
        Agency Assessment","15/04/2019","15 Dunn Rd, Avenell Heights 4670 QLD \u003cbr/\u003e\u003cb\u003eAmenity
        \u0026 Aesthetics and Design \u0026 Siting (Carport)\u003c/b\u003e"],["532.2019.00000570.001","532.2019.570.1","Concurrence
        Agency Assessment","18/04/2019","6 Coral Cove Dr, Coral Cove 4670 QLD \u003cbr/\u003e\u003cb\u003eDesign
        \u0026 Siting (Dwelling)\u003c/b\u003e"],["526.2019.00000121.001","526.2019.121.1","Change
        Application","17/04/2019","49 Cummins Rd, Branyan 4670 QLD \u003cbr/\u003e\u003cb\u003eMinor
        Change (Electrical Substation)\u003c/b\u003e"],["532.2019.00000568.001","532.2019.568.1","Concurrence
        Agency Assessment","15/04/2019","142 Bargara Rd, Bundaberg East 4670 QLD \u003cbr/\u003e\u003cb\u003eAmenity
        and Aesthetics (Removal of Dwelling)\u003c/b\u003e"],["526.2019.00000118.001","526.2019.118.1","Change
        Application","15/04/2019","27 Eggmolesse St, Svensson Heights 4670 QLD \u003cbr/\u003e\u003cb\u003eMinor
        Change (Edenbrook Stage 33 Lots into 32 Lots)\u003c/b\u003e"]]}'
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/522.2019.00000145.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '34569'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:18:05 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 ce728907a201ee4bd45e0b0d29cebb4c.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - TPSXQoIIUcfPqE-cV1EV4kWDOrUrAf6Jf3bJvj8eCqGieyYmJdSshw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/521.2019.00000108.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '42521'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:18:08 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 da12738b8eacc0d543b2915c5e4262dd.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - ulxofSHcu6wrsTLpzNCdhgkk61LSG1pWZvkH_r8VMbObceQn7-bMwg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/526.2019.00000120.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '28382'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:18:10 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 c8e9fcb0bdf2652cf4693ca6ef2833ce.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - WD5UK95xy9bHYvVRMV4w58iEv316_VS0o9UsB_zAiDObZDIz_mKKvQ==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/523.2019.00000110.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '30260'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:18:12 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 7deef1b127ef20298bc2b899e7c84e4a.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - dtPAXYpDwaq0h0H9bYryENMAgcNx5nwe25nJt0NkklB-Y3ZEWl8f5A==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/522.2019.00000144.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '38707'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:18:15 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 0fdd8a19a9733146290bbb49eeceb280.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - BQNjQqbEZ31n5a5xXsaD4FoMGUWPwJPd40K1WxXpblzzNdE_HVEycA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/521.2019.00000110.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '36478'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:18:17 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 8eb3faf3f05da0ac024b118287e8d2bd.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - Udc4gS9b7ThfZliL_iC19HzUTLgrE-JQhINfWY3-22qOh8JDxCs3mw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/523.2019.00000111.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '29552'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:18:18 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 38264aca9bab114a0bd19db8ab8521dd.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - KH7crL6GtKr4iJhGr3KYY7oya2-jqCS7ErjVk-dtp-fsHfGloq02Jw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/526.2019.00000124.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '28311'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:18:19 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 d464a17a20fc9cad7861828ec660c393.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - h9c02ICabaCWJxuyqVGdzgLzjJB9dz7ogLl613DROHsBqxxg4fAKNQ==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iQnVuZGFiZXJnIFJlZ2lvbmFsIENvdW5jaWwsREEgVHJhY2tlcixEZXZlbG9wbWVudCBBcHBsaWNhdGlvbixEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBUcmFja2luZywgREEgRW5xdWlyeSwgRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gRW5xdWlyeSwgQXBwbGljYXRpb24gVHJhY2tlciI+DQogICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IlRoZSBvZmZpY2lhbCBCdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCg0KICAgIDx0aXRsZT5CdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbCAtIEFwcGxpY2F0aW9uIFRyYWNrZXI8L3RpdGxlPg0KDQogICAgPCEtLWZhdmljb24tLT4NCiAgICA8bGluayBocmVmPSIvZmF2aWNvbi5pY28iIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIj4NCg0KICAgIDwhLS0galF1ZXJ5IC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvYnVuZGxlcy9qcXVlcnk/dj1OOVgzMW9qMjRsbGkxdVZGcFg2dWowTTJXZE43R2RnTWpudllFVW9JeDdzMSI+PC9zY3JpcHQ+DQoNCiAgICA8c2NyaXB0IHNyYz0iL2J1bmRsZXMvanF1ZXJ5dWk/dj1tbTN2MlBwR1VrRFVyaUU2YnpKdVRscWJfdFZqbVdFR2o0aTRnU0o3aXBVMSI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS9qcXVlcnk/dj1yY0F2OENjR2tGcnZaWlpxTzZJaHBYb0hQa05FQ2k1SVBHLUhCRjFCYjEwMSIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gQm9vdHN0cmFwIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvYnVuZGxlcy9ib290c3RyYXA/dj13TUZCSUlaNk9zVUNlMXFPU2xSTlNfNmhHQkpnZkNFMDVWaDFHekNwcFlvMSI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9ib290c3RyYXA/dj1tS3NvR3lsTHpnOFhBOW5RaDV2dkJtMHV2Vi1LOHBiNVhUcmFEQ3M0a2JNMSIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWU/dj1ERU5YTmNRV0NVcVhMV213NGo1VUxQUFRwd2dXZ1E4RGo5YlFCRHFDNmFnMSIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gRGF0YVRhYmxlcyAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL2J1bmRsZXMvZGF0YVRhYmxlcz92PVVIWUR4TzhWVmgyUmdDbWlWVU0tM0NpdmJfUTJjR2NieE1TVXhnRnViWEExIj48L3NjcmlwdD4NCg0KICAgIA0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L0RhdGFUYWJsZXMvY3NzP3Y9ZWtvMElPbWhlN2Myd0E0WVlGNURMX0NuRzR3b2k2ZTRYa0gzSHl4M1luZzEiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCBTQi1BZG1pbi0yIFBsdWdpbiBhbmQgb3RoZXIgY3NzIGFuZCBqcyBmaWxlcy0tPg0KICAgIDxzY3JpcHQgc3JjPSIvanMvanNGb2xkZXI/dj0xZmh3ajFpb2NHMjg5bW5GQVMtYU9Dd3hRdWVFQTJCYW5qb3pHb2JFMzNvMSI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvY3NzL2Nzc0ZvbGRlcj92PXl2aC1XNHl6ODg3QkF3NTJIZFoyWFlodkdmN3RWdmY1eG9jTkkteG1NYzQxIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPGxpbmsgaHJlZj0iL0NvdW5jaWxfVGhlbWUvY3NzP3Y9NzltRkVGY2lyalUyUlc1bXJOQUREU3NkaEl4bk9FYmJnOExGelVHUDRZczEiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgPHNjcmlwdCBzcmM9Ii9Db3VuY2lsX1RoZW1lL2pzP3Y9Ij48L3NjcmlwdD4NCg0KDQogICAgPCEtLSBIVE1MNSBTaGltIGFuZCBSZXNwb25kLmpzIElFOCBzdXBwb3J0IG9mIEhUTUw1IGVsZW1lbnRzIGFuZCBtZWRpYSBxdWVyaWVzIC0tPg0KICAgIDwhLS0gV0FSTklORzogUmVzcG9uZC5qcyBkb2Vzbid0IHdvcmsgaWYgeW91IHZpZXcgdGhlIHBhZ2UgdmlhIGZpbGU6Ly8gLS0+DQogICAgPCEtLVtpZiBsdCBJRSA5XT4NCiAgICAgICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vb3NzLm1heGNkbi5jb20vbGlicy9odG1sNXNoaXYvMy43LjAvaHRtbDVzaGl2LmpzIj48L3NjcmlwdD4NCiAgICAgICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vb3NzLm1heGNkbi5jb20vbGlicy9yZXNwb25kLmpzLzEuNC4yL3Jlc3BvbmQubWluLmpzIj48L3NjcmlwdD4NCiAgICA8IVtlbmRpZl0tLT4NCjwvaGVhZD4NCg0KDQoNCjxib2R5Pg0KICAgIDxkaXYgY2xhc3M9InB1c2htZW51IGNicC1zcG1lbnUtcHVzaCI+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICA8aGVhZGVyIGlkPSJIZWFkZXIiPg0KICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCIgcm9sZT0ibmF2aWdhdGlvbiIgaWQ9Ik5hdkJhciI+DQogICAgICAgICAgICAgICAgICAgIDwhLS0gQnJhbmQgYW5kIHRvZ2dsZSBnZXQgZ3JvdXBlZCBmb3IgYmV0dGVyIG1vYmlsZSBkaXNwbGF5IC0tPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InV0aWxzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3LmJ1bmRhYmVyZy5xbGQuZ292LmF1IiB0YXJnZXQ9Il9ibGFuayI+SG9tZTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuYnVuZGFiZXJnLnFsZC5nb3YuYXUvY291bmNpbC9jdXN0b21lci1zZXJ2aWNlIiB0YXJnZXQ9Il9ibGFuayI+Q29udGFjdCBVczwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuYnVuZGFiZXJnLnFsZC5nb3YuYXUvcHJpdmFjeSIgdGFyZ2V0PSJfYmxhbmsiPlByaXZhY3kgUG9saWN5PC9hPjwvbGk+DQo8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8aDEgaWQ9ImxvZ28iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmJ1bmRhYmVyZy5xbGQuZ292LmF1Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9Db3VuY2lsX1RoZW1lL0J1bmRhYmVyZy9icmMtbG9nby5wbmciIGFsdD0iQnVuZGFiZXJnIFJlZ2lvbmFsIENvdW5jaWwiPjxzdHJvbmcgY2xhc3M9InZoIj5CdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbDwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDE+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvbmF2Pg0KDQoNCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJiYW5uZXIiPg0KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL0NvdW5jaWxfVGhlbWUvQnVuZGFiZXJnL2Jhbm5lci5qcGciPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8L2hlYWRlcj4NCg0KICAgICAgICAgICAgPGRpdiBpZD0iY29udGVudCI+DQogICAgICAgICAgICAgICAgPCEtLSBOYXZpZ2F0aW9uIC0tPg0KICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCBuYXZiYXItc3RhdGljLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDAiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0ibmF2YmFyLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iLm5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBuYXZpZ2F0aW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2YmFyLWJyYW5kIiBocmVmPSIvSG9tZS9JbmRleCI+PC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdmJhci1oZWFkZXIgLS0+DQogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdmJhci10b3AtbGlua3MgbmF2YmFyLXJpZ2h0IGhpZGRlbi14cyBoaWRkZW4tc20gaGlkZGVuLW1kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48c3BhbiBpZD0icHJpbnRJY29uIiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1wcmludCIgb25jbGljaz0id2luZG93LnByaW50KCk7Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgPC91bD4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItZGVmYXVsdCBzaWRlYmFyIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNpZGViYXItbmF2IG5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYiIGlkPSJzaWRlLW1lbnUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbiBUcmFja2VyPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvQWJvdXQgdGFyZ2V0PV9zZWxmPldoYXQgaXMgQXBwbGljYXRpb24gVHJhY2tlcj88L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvRGlzY2xhaW1lciB0YXJnZXQ9X3NlbGY+RGlzY2xhaW1lcjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnM8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9JbmRleCB0YXJnZXQ9PkFwcGxpY2F0aW9uIFRyYWNrZXIgSG9tZTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9TZWFyY2ggaWQ9c2VhcmNoIHRhcmdldD1fc2VsZj5TZWFyY2g8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P1JlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9VHJ1ZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgaWQ9b3V0c3RhbmRpbmctYXBwcyB0YXJnZXQ9X3NlbGY+VW5kZXRlcm1pbmVkIEFwcGxpY2F0aW9uczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/UmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPVRydWUmSW5jbHVkZURvY3VtZW50cz1GYWxzZSBpZD1leGhpYml0ZWQtYXBwcyB0YXJnZXQ9X3NlbGY+QXBwbGljYXRpb25zIE9uIEV4aGliaXRpb248L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zIFN1Ym1pdHRlZDxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0yMCUyZjA3JTJmMjAyMCZEYXRlVG89MjElMmYwNyUyZjIwMjAmRGF0ZVR5cGU9MSZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTEyJTJmMDclMmYyMDIwJkRhdGVUbz0xOCUyZjA3JTJmMjAyMCZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MSUyZjA3JTJmMjAyMCZEYXRlVG89MjElMmYwNyUyZjIwMjAmRGF0ZVR5cGU9MSZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDYlMmYyMDIwJkRhdGVUbz0zMCUyZjA2JTJmMjAyMCZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zIERldGVybWluZWQ8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MjAlMmYwNyUyZjIwMjAmRGF0ZVRvPTIxJTJmMDclMmYyMDIwJkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTEyJTJmMDclMmYyMDIwJkRhdGVUbz0xOCUyZjA3JTJmMjAyMCZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDclMmYyMDIwJkRhdGVUbz0yMSUyZjA3JTJmMjAyMCZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+VGhpcyBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MSUyZjA2JTJmMjAyMCZEYXRlVG89MzAlMmYwNiUyZjIwMjAmRGF0ZVR5cGU9MiZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9VHJ1ZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5zaWRlYmFyLWNvbGxhcHNlIC0tPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdmJhci1zdGF0aWMtc2lkZSAtLT4NCiAgICAgICAgICAgICAgICA8L25hdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwYWdlLXdyYXBwZXIiPg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIA0KDQoNCiAgICA8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgICAgIDxoMj5BcHBsaWNhdGlvbjogQ2hhbmdlIEFwcGxpY2F0aW9uICg1MjYuMjAxOS4xMjQuMSk8L2gyPg0KICAgIDwvZGl2Pg0KICAgIDxoND5EZXRhaWxlZCBpbmZvcm1hdGlvbiByZWxhdGVkIHRvIHRoZSBhcHBsaWNhdGlvbjo8L2g0Pg0KICAgIDxiciAvPg0KICAgIDxkaXY+DQogICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6c2hvd0FsbCgpOyI+U2hvdyBBbGw8L2E+IC8NCiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDpoaWRlQWxsKCk7Ij5IaWRlIEFsbDwvYT4NCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGlkPSJhcHBsaWNhdGlvbiI+DQoNCiAgICAgICAgICAgIDxoMyBpZD0iZGV0YWlscyI+PGEgaHJlZj0iIyI+RGV0YWlsczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGVzY3JpcHRpb246IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJkZXNjcmlwdGlvbiI+TWlub3IgQ2hhbmdlIC0gRXh0cmFjdGl2ZSBJbmR1c3RyeSBVc2U8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+U3VibWl0dGVkIERhdGU6IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTMvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QXBwbGljYXRpb24gVHlwZTogPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+Q2hhbmdlIEFwcGxpY2F0aW9uPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InByb3BlcnRpZXMiPjxhIGhyZWY9IiMiPlByb3BlcnRpZXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJwcm9wZXJ0eS1saXN0Ij4yMTAgTWFpbG1hbnMgUmQsIE1vbmR1cmFuIDQ2NzEgUUxEICAoTG90OiAxMiBTUDogMjQwNDU4KTxici8+TGVzdGVycyBSZCwgTW9uZHVyYW4gNDY3MSBRTEQgIChMb3Q6IDIyIEJPTjogMTM2Nik8YnIvPk1vbmR1cmFuIFJkLCBNb25kdXJhbiA0NjcxIFFMRCAgKExvdDogNyBTUDogMTgxNzc0KTxici8+TW9uZHVyYW4gUmQsIE1vbmR1cmFuIDQ2NzEgUUxEICAoTG90OiA5IFNQOiAyNDA0NTUpPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InBlb3BsZSI+PGEgaHJlZj0iIyI+UGVvcGxlPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT3duZXI6IEphbWVzIEJhdWVyDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT3duZXI6IEplbm5pZmVyIEJhdWVyDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwbGljYW50OiAgQmVyam9uZG8gUHR5IEx0ZA0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0ib2ZmaWNlciI+PGEgaHJlZj0iIyI+T2ZmaWNlcjwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9Im9mZmljZXJOYW1lIj5FcmluIENsYXJrPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9ImRlY2lzaW9uIj48YSBocmVmPSIjIj5EZWNpc2lvbjwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QXBwbGljYXRpb24gU3RhdHVzOiBEZXRlcm1pbmVkPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXRlcm1pbmF0aW9uIERhdGU6DQowMy8wNy8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRldGVybWluYXRpb24gVHlwZTogQXBwcm92ZWQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KICAgICAgICAgICAgPGgzIGlkPSJ0cmFja2luZyI+PGEgaHJlZj0iIyI+VHJhY2tpbmc8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EZXNjcmlwdGlvbjwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db21tZW5jZWQgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db21wbGV0ZWQgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Mb2RnZW1lbnQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTMvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjEzLzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QWN0aW9uIE5vdGljZSBSZXF1aXJlZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxMy8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTMvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BY3Rpb24gTm90aWNlIFJlc3BvbnNlPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjEzLzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxNC8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRlY2lzaW9uIFN0YWdlPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE0LzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowMy8wNy8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRlY2lzaW9uIE5vdGljZTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowMy8wNy8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDkvMDcvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KDQoNCg0KICAgICAgICAgICAgPGgzIGlkPSJyZWxhdGVkQXBwbGljYXRpb25zIj48YSBocmVmPSIjIj5SZWxhdGVkIEFwcGxpY2F0aW9uczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPGI+Tm8gZGF0YS48L2I+DQogICAgICAgICAgICA8L2Rpdj4NCg0KDQoNCg0KDQoNCg0KPGgzIGlkPSJkb2N1bWVudHMiPjxhIGhyZWY9IiMiPkRvY3VtZW50czwvYT48L2gzPg0KPGRpdj4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJpY29uLXdyYXAiPg0KICAgICAgICAgICAgPHNwYW4+c3dpcGUgdGFibGUgdG8gdGhlIGxlZnQgdG8gcmV2ZWFsIG1vcmUgZGF0YTwvc3Bhbj4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWFycm93LXJpZ2h0IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9zcGFuPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBpZD0iZG9jLWNvdW50Ij5Ub3RhbCBudW1iZXIgb2YgZG9jdW1lbnRzOiAyPC9kaXY+DQogICAgICAgIDx0YWJsZSBpZD0iZG9jLXRhYmxlIiBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCB0YWJsZS1ib3JkZXJlZCBuby1mb290ZXIiPg0KICAgICAgICAgICAgPHRoZWFkPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRoPlJlY29yZCBOdW1iZXI8L3RoPg0KICAgICAgICAgICAgICAgICAgICA8dGg+RGVzY3JpcHRpb248L3RoPg0KICAgICAgICAgICAgICAgICAgICA8dGg+RG9jdW1lbnQgVHlwZTwvdGg+DQogICAgICAgICAgICAgICAgICAgIDx0aCBzdHlsZT0iZGlzcGxheTpub25lIj5TaXplPC90aD4NCiAgICAgICAgICAgICAgICAgICAgPHRoPlZpZXcgTGluazwvdGg+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+MTI0IC0gTGV0dGVyIC0gQ2hhbmdlIEFwcGxpY2F0aW9uIC0gT3V0c3RhbmRpbmcgUmVxdWlyZW1lNG50cyAtIEJlcmpvbmRvIFB0eSBMdGQgLSBMZXN0ZXIgUmQgLSAxMzA1MjAxOS5wZGYucGRmPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgUERGDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT0iZGlzcGxheTpub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjAwIE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYS5idW5kYWJlcmcucWxkLmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9WW9SUGNpVFREdldaTkJvdEFTeURXNkhPWGMxM3BOckZBRTk3cm90OGdUNjFOSmJjVFZNQW9JR3dCdTI5RXpSN2IrVVlKUzUycHRUd3pDa2ROY1Z5MHd0Zmd4ayt3ZFo2ZmdwdlU0VC9oWHZzTXhPb0E0YUMvNmZwNkZqSUg1ZmcxemdhRk40UnArTk9ibnkxSG9GUmNJMG9NQjhhcHY1TVRJZFM5KzA1QWFzPSZhbXA7ZmlsZU5hbWU9MTI0Ky0rTGV0dGVyKy0rQ2hhbmdlK0FwcGxpY2F0aW9uKy0rT3V0c3RhbmRpbmcrUmVxdWlyZW1lNG50cystK0JlcmpvbmRvK1B0eStMdGQrLStMZXN0ZXIrUmQrLSsxMzA1MjAxOS5wZGYucGRmLnBkZiIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KMiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjEyNCAtIFByb3Bvc2FsIC0gQmVyam9uZG8gUHR5IEx0ZCAtIExlc3RlciBSZCAtIDEzMDUyMDE5LnBkZjwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIFBERg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQgc3R5bGU9ImRpc3BsYXk6bm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4wMCBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGEuYnVuZGFiZXJnLnFsZC5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PTRVcVd6by9JQmZCS1ZISVZiOG10MC8vMkdHOEZBekVxUE9OMmVDNCsvM1ZWcFBlQWJSb3NaeEpWa1Q5K2FpZGVnQ2M4aDk3QlEyY1ppQWgyKzlEbUU0dlV6L0doWDZVcCZhbXA7ZmlsZU5hbWU9MTI0Ky0rUHJvcG9zYWwrLStCZXJqb25kbytQdHkrTHRkKy0rTGVzdGVyK1JkKy0rMTMwNTIwMTkucGRmLnBkZiIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KDQogICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICA8L3RhYmxlPg0KPC9kaXY+DQoNCg0KICAgICAgICAgICAgPGgzIGlkPSJjb250YWN0VXMiPjxhIGhyZWY9IiMiPkNvbnRhY3QgVXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlNob3VsZCB5b3Ugd2lzaCB0byBjb250YWN0IGNvdW5jaWwgdG8gbWFrZSBlbnF1aXJpZXMgcmVnYXJkaW5nIGFwcGxpY2F0aW9ucyBkaXNwbGF5ZWQgb24gdGhlIHdlYnNpdGUsIHBsZWFzZSBjb250YWN0IGNvdW5jaWwgZWl0aGVyIGJ5IGVtYWlsIDxhIGhyZWY9Im1haWx0bzpDRU9AYnVuZGFiZXJnLnFsZC5nb3YuYXU/c3ViamVjdD1TdWJtaXNzaW9uIGZvciBhcHBsaWNhdGlvbiAoNTI2LjIwMTkuMTI0LjEpIj5DRU9AYnVuZGFiZXJnLnFsZC5nb3YuYXU8L2E+LCBwaG9uZSAxMzAwIDg4MyA2OTkgZHVyaW5nIG5vcm1hbCBvZmZpY2UgaG91cnMgb3IgaW4gd3JpdGluZyB0byBQTyBCb3ggMzEzMCxCVU5EQUJFUkcgUUxEIDQ2NzANCiAgICAgICAgLiBBbGwgY29ycmVzcG9uZGVuY2Ugc2hvdWxkIGJlIGFkZHJlc3NlZCB0byB0aGUgR2VuZXJhbCBNYW5hZ2VyIGFuZCBxdW90ZSB0aGUgcmVsZXZhbnQgYXBwbGljYXRpb24gcmVmZXJlbmNlIG51bWJlci4NCjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KDQo8aDMgaWQ9Imdvb2dsZW1hcHMiPjxhIGhyZWY9IiMiPkdvb2dsZSBNYXBzPC9hPjwvaDM+DQo8ZGl2IGlkPSJtYXBfY29udGFpbmVyIj4NCiAgICA8ZGl2IGlkPSJtYXBfY2FudmFzIiBjbGFzcz0iaWZyYW1lLXJ3ZCI+DQogICAgPC9kaXY+DQo8L2Rpdj4NCg0KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgd2luZG93Lm9ubG9hZCA9IGxvYWRHb29nbGVNYXBzU2NyaXB0Ow0KDQogICAgdmFyIGdlb2NvZGVyOw0KICAgIHZhciBtYXA7DQogICAgdmFyIHRpbWVvdXQgPSAzMDA7DQogICAgdmFyIHByb3BlcnRpZXMgPSBbIjIxMCBNYWlsbWFucyBSZCwgTW9uZHVyYW4gNDY3MSBRTEQgIiwiTGVzdGVycyBSZCwgTW9uZHVyYW4gNDY3MSBRTEQgIiwiTW9uZHVyYW4gUmQsIE1vbmR1cmFuIDQ2NzEgUUxEICJdOw0KICAgIHZhciBsYXRMbmdBcnIgPSBbXTsNCg0KICAgIGZ1bmN0aW9uIGxvYWRHb29nbGVNYXBzU2NyaXB0KCkgew0KICAgICAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7DQogICAgICAgIHNjcmlwdC50eXBlID0gInRleHQvamF2YXNjcmlwdCI7DQogICAgICAgIHNjcmlwdC5zcmMgPSAiLy9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL2pzP2tleT1BSXphU3lBNUhZZ2FYQmNtYVFlMjBIV3Z2cWRXZ2tkUDlHLXJmSGMmY2FsbGJhY2s9bG9hZEdvb2dsZU1hcHMiOw0KICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gcmVuZGVyR29vZ2xlTWFwcygpDQogICAgew0KICAgICAgICB2YXIgbWFwT3B0aW9ucyA9IHsNCiAgICAgICAgICAgIGNlbnRlcjogbGF0TG5nQXJyWzBdLA0KICAgICAgICAgICAgem9vbTogMTYsDQogICAgICAgICAgICBtYXBUeXBlSWQ6IGdvb2dsZS5tYXBzLk1hcFR5cGVJZC5ST0FETUFQLA0KICAgICAgICAgICAgbWFwVHlwZUNvbnRyb2w6IGZhbHNlDQogICAgICAgIH0NCg0KICAgICAgICBtYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtYXBfY2FudmFzIiksIG1hcE9wdGlvbnMpOw0KDQogICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZERvbUxpc3RlbmVyKHdpbmRvdywgJ3Jlc2l6ZScsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgdmFyIGNlbnRlciA9IG1hcC5nZXRDZW50ZXIoKTsNCiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIobWFwLCAncmVzaXplJyk7DQogICAgICAgICAgICBtYXAuc2V0Q2VudGVyKGNlbnRlcik7DQogICAgICAgIH0pOw0KDQogICAgfQ0KDQogICAgZnVuY3Rpb24gbG9hZEdvb2dsZU1hcHMoKSB7DQogICAgICAgIGdlb2NvZGVyID0gbmV3IGdvb2dsZS5tYXBzLkdlb2NvZGVyKCk7DQogICAgICAgIHZhciBub09mRmFpbGVkTG9jYXRpb25TZWFyY2ggPSAwOw0KDQogICAgICAgICQocHJvcGVydGllcykuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHsNCiAgICAgICAgICAgIHZhciBwcm9wZXJ0eUFkZHJlc3MgPSBlbGVtZW50Ow0KDQogICAgICAgICAgICAvL0dldCBnZW9jb2RlDQogICAgICAgICAgICBnZW9jb2Rlci5nZW9jb2RlKHsgJ2FkZHJlc3MnOiBwcm9wZXJ0eUFkZHJlc3MgfSwgZnVuY3Rpb24gKHJlc3VsdHMsIHN0YXR1cykgew0KICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT0gZ29vZ2xlLm1hcHMuR2VvY29kZXJTdGF0dXMuT0spIHsNCg0KICAgICAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb24gPSByZXN1bHRzWzBdLmdlb21ldHJ5LmxvY2F0aW9uOw0KICAgICAgICAgICAgICAgICAgICB2YXIgbGF0TG5nID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhsb2NhdGlvbi5sYXQoKSwgbG9jYXRpb24ubG5nKCkpOw0KDQogICAgICAgICAgICAgICAgICAgIGxhdExuZ0Fyci5wdXNoKGxhdExuZyk7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYobGF0TG5nQXJyLmxlbmd0aCA9PSAxKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJHb29nbGVNYXBzKCk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAvL0NyZWF0ZSBtYXJrZXIgZm9yIG1hcCBhbmQgcGxhY2UgaXQgb24gdGhlIG1hcA0KICAgICAgICAgICAgICAgICAgICB2YXIgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7DQogICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogbGF0TG5nLA0KICAgICAgICAgICAgICAgICAgICAgICAgbWFwOiBtYXANCiAgICAgICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRTdHJpbmcgPSAnPGRpdj48c3Bhbj4nICsgcHJvcGVydHlBZGRyZXNzICsgJzwvc3Bhbj48L2Rpdj4nOw0KICAgICAgICAgICAgICAgICAgICB2YXIgaW5mb3dpbmRvdyA9IG5ldyBnb29nbGUubWFwcy5JbmZvV2luZG93KHsgICAvL0NyZWF0ZSBpbmZvIHdpbmRvdw0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogY29udGVudFN0cmluZw0KICAgICAgICAgICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXJrZXIsICdjbGljaycsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgaW5mb3dpbmRvdy5vcGVuKG1hcCwgbWFya2VyKTsNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIC8vaWYgbm8gbG9jYXRpb24gZm91bmQgYnkgZ29vZ2xlIGZvciBhIHByb3BlcnR5DQogICAgICAgICAgICAgICAgZWxzZSBpZiAoc3RhdHVzID09ICJaRVJPX1JFU1VMVFMiKSB7DQogICAgICAgICAgICAgICAgICAgIG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCsrOw0KDQogICAgICAgICAgICAgICAgICAgIGlmKG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCA9PSAkKHByb3BlcnRpZXMpLmxlbmd0aCkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZUdvb2dsZU1hcHNDb250ZW50KCk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09IGdvb2dsZS5tYXBzLkdlb2NvZGVyU3RhdHVzLk9WRVJfUVVFUllfTElNSVQpIHsNCiAgICAgICAgICAgICAgICAgICAgLy9zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgZ2V0R2VvQ29kZUZvckFkZHJlc3MoaWQsIGFkZHJlc3MpOyB9LCAodGltZW91dCkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICAvL1JlcGxhY2VzIGdvb2dsZSBtYXBzIGNvbnRlbnQgd2l0aCBhIG5ldyBkaXYgYmxvY2sgdGhhdCBoYXMgaW5mbyBtZXNzYWdlDQogICAgZnVuY3Rpb24gcmVwbGFjZUdvb2dsZU1hcHNDb250ZW50KCkgew0KICAgICAgICB2YXIgbmV3Q29udGVudCA9ICc8ZGl2IGNsYXNzPSJ1aS1hY2NvcmRpb24tY29udGVudCB1aS1oZWxwZXItcmVzZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWJvdHRvbSI+JyArDQogICAgICAgICAgICAnPHA+Q291bGRuXCd0IGZpbmQgdGhlIHByb3BlcnR5IGFkZHJlc3MoZXMpIG9uIEdvb2dsZSBNYXBzLiA8cD4nICsNCiAgICAgICAgICAgICc8L2Rpdj4nOw0KDQogICAgICAgICQoJyNtYXBfY29udGFpbmVyJykucmVwbGFjZVdpdGgobmV3Q29udGVudCk7DQogICAgfQ0KDQo8L3NjcmlwdD4NCg0KICAgIDwvZGl2Pg0KICAgIDxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIGlkPSJzdWJtaXNzaW9uLW1vZGFsIj4NCiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InNwaW5uZXIiPjwvZGl2PiA8IS0tIFRoaXMgZGl2IGhvc3RzIHRoZSBzcGlubmVyIC0tPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPjxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPjwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9Im1vZGFsLXRpdGxlIj5TdWJtaXNzaW9uIGZvciA1MjYuMjAxOS4xMjQuMTwvaDI+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgew0KDQogICAgICAgICQoJyNhcHBsaWNhdGlvbicpLnRvZ2dsZXBhbmVscygpOw0KDQogICAgICAgICAgICAkKCcjcHJvcGVydGllcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZGV0YWlscycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjdHJhY2tpbmcnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2RvY3VtZW50cycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjcmVsYXRlZEFwcGxpY2F0aW9ucycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZ29vZ2xlbWFwcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjY29udGFjdFVzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNleGhpYml0aW9uRGV0YWlscycpLmNsaWNrKCk7DQoNCiAgICAgICAgDQoNCg0KICAgICAgICAkKCcjc3VibWlzc2lvbi1idG4nKS5jbGljayhmdW5jdGlvbiAoKSB7ICAgICAgICANCg0KDQogICAgICAgICAgICB2YXIgdXJsID0gImh0dHBzOi8vZGEuYnVuZGFiZXJnLnFsZC5nb3YuYXUvL0FwcGxpY2F0aW9uL1N1Ym1pc3Npb24vIiArIGVuY29kZVVSSSgiNTI2LjIwMTkuMTI0LjEiKTsNCg0KICAgICAgICAgICAgJCgnI3N1Ym1pc3Npb24tbW9kYWwnKS5tb2RhbCgnc2hvdycpLmZpbmQoJy5tb2RhbC1ib2R5JykubG9hZCh1cmwpOw0KICAgICAgICB9KTsNCiAgICB9KTsNCg0KDQogICAgLyogU2hvd3MgYWxsIHRoZSBwYW5lbHMgKi8NCiAgICBmdW5jdGlvbiBzaG93QWxsKCkgew0KICAgICAgICAkKCcjYXBwbGljYXRpb24nKS5jaGlsZHJlbigiaDMiKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCJ1aS1zdGF0ZS1kZWZhdWx0IikpIHsNCiAgICAgICAgICAgICAgICAkKHRoaXMpLmNsaWNrKCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgIH0NCg0KDQogICAgLyogSGlkZSBhbGwgdGhlIHBhbmVscyAqLw0KICAgIGZ1bmN0aW9uIGhpZGVBbGwoKSB7DQogICAgICAgICQoJyNhcHBsaWNhdGlvbicpLmNoaWxkcmVuKCJoMyIpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoInVpLXN0YXRlLWFjdGl2ZSIpKSB7DQogICAgICAgICAgICAgICAgJCh0aGlzKS5jbGljaygpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICA8L3NjcmlwdD4NCg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLmNvbnRhaW5lci1mbHVpZCAtLT4NCg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwhLS0gLyNwYWdlLXdyYXBwZXIgLS0+DQogICAgICAgICAgICA8L2Rpdj4NCg0KDQogICAgICAgICAgICA8ZGl2IGlkPSJHcmVlbkJhciI+DQogICAgICAgICAgICAgICAgPGE+Q29weXJpZ2h0IMKpIDIwMTcgQnVuZGFiZXJnIFJlZ2lvbmFsIENvdW5jaWwuIEFsbCByaWdodHMgcmVzZXJ2ZWQ8L2E+DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQoNCiAgICA8ZGl2IGlkPSJ0aXB0aXBfaG9sZGVyIiBzdHlsZT0ibWF4LXdpZHRoOjMwMHB4OyI+PGRpdiBpZD0idGlwdGlwX2Fycm93Ij48ZGl2IGlkPSJ0aXB0aXBfYXJyb3dfaW5uZXIiPjwvZGl2PjwvZGl2PjxkaXYgaWQ9InRpcHRpcF9jb250ZW50Ij48L2Rpdj48L2Rpdj4NCjwvYm9keT4NCg0KPC9odG1sPg0K
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/522.2019.00000142.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '30624'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:18:21 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 e0cb6c9d540bf5ec954ac9d625103a85.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - PAcGmjjo5P3CpyyZgzNFFdI9jA_VzAcq-i7jPzUyzP3dPyKdzLIQZA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/526.2019.00000119.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '26749'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:18:22 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 ac2d783151ad01d001afb8d6b8b16550.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - GtnPkhiLMORU5YEYJyjkqcm_JJnL6rHHX9EVzHzWCwI2ydFtDDk9Xw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/525.2019.00000014.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '31891'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:18:26 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 fee2204e836082f271d6cc60790053cc.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - 99qRbulMTlSig7OlHAdekhAOtZJO_eaua-s0AKVPx5cD23KvXXTMsQ==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/526.2019.00000123.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '28869'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:18:30 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 c8e9fcb0bdf2652cf4693ca6ef2833ce.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - 0stsTBCwCadMfl7Ecxp0Ni2pyRAe9kpgwwTfqXaT9u5q4UVB-MFKIA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/532.2019.00000574.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '27535'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:18:34 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 98c0260f137c498b550b5ea75d3bc892.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - hVxsyLSd6kTudDq0rt7oSQXaDARjhgT2EDdmZcCNzapKlR5NoBQnhQ==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/521.2019.00000109.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '30137'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:18:38 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 c71e51961956d2c084f13451959744df.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - itBOizcEe2tEtjEKrzwmmraj2wp99knXOLA_xISeyJLggLwDbVCAjA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/526.2019.00000122.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '30454'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:18:39 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 e3cb2b95dc77970fa884677fa82b833f.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - eZpLWwk5a-uQnd9NitGq1g1Q6KhhUp-GHJDUG6Hhyd_d6OFdxOlhbg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/532.2019.00000577.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '27127'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:18:41 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 291933b5bb7fbb03efd999a83bb9696a.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - lzHK0mGn5x69bhtZG4Eo1AyD5nlKGl5G7ZG47s4jx4px5UGxFWu4xg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iQnVuZGFiZXJnIFJlZ2lvbmFsIENvdW5jaWwsREEgVHJhY2tlcixEZXZlbG9wbWVudCBBcHBsaWNhdGlvbixEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBUcmFja2luZywgREEgRW5xdWlyeSwgRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gRW5xdWlyeSwgQXBwbGljYXRpb24gVHJhY2tlciI+DQogICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IlRoZSBvZmZpY2lhbCBCdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCg0KICAgIDx0aXRsZT5CdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbCAtIEFwcGxpY2F0aW9uIFRyYWNrZXI8L3RpdGxlPg0KDQogICAgPCEtLWZhdmljb24tLT4NCiAgICA8bGluayBocmVmPSIvZmF2aWNvbi5pY28iIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIj4NCg0KICAgIDwhLS0galF1ZXJ5IC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvYnVuZGxlcy9qcXVlcnk/dj1OOVgzMW9qMjRsbGkxdVZGcFg2dWowTTJXZE43R2RnTWpudllFVW9JeDdzMSI+PC9zY3JpcHQ+DQoNCiAgICA8c2NyaXB0IHNyYz0iL2J1bmRsZXMvanF1ZXJ5dWk/dj1tbTN2MlBwR1VrRFVyaUU2YnpKdVRscWJfdFZqbVdFR2o0aTRnU0o3aXBVMSI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS9qcXVlcnk/dj1yY0F2OENjR2tGcnZaWlpxTzZJaHBYb0hQa05FQ2k1SVBHLUhCRjFCYjEwMSIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gQm9vdHN0cmFwIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvYnVuZGxlcy9ib290c3RyYXA/dj13TUZCSUlaNk9zVUNlMXFPU2xSTlNfNmhHQkpnZkNFMDVWaDFHekNwcFlvMSI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9ib290c3RyYXA/dj1tS3NvR3lsTHpnOFhBOW5RaDV2dkJtMHV2Vi1LOHBiNVhUcmFEQ3M0a2JNMSIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWU/dj1ERU5YTmNRV0NVcVhMV213NGo1VUxQUFRwd2dXZ1E4RGo5YlFCRHFDNmFnMSIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gRGF0YVRhYmxlcyAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL2J1bmRsZXMvZGF0YVRhYmxlcz92PVVIWUR4TzhWVmgyUmdDbWlWVU0tM0NpdmJfUTJjR2NieE1TVXhnRnViWEExIj48L3NjcmlwdD4NCg0KICAgIA0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L0RhdGFUYWJsZXMvY3NzP3Y9ZWtvMElPbWhlN2Myd0E0WVlGNURMX0NuRzR3b2k2ZTRYa0gzSHl4M1luZzEiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCBTQi1BZG1pbi0yIFBsdWdpbiBhbmQgb3RoZXIgY3NzIGFuZCBqcyBmaWxlcy0tPg0KICAgIDxzY3JpcHQgc3JjPSIvanMvanNGb2xkZXI/dj0xZmh3ajFpb2NHMjg5bW5GQVMtYU9Dd3hRdWVFQTJCYW5qb3pHb2JFMzNvMSI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvY3NzL2Nzc0ZvbGRlcj92PXl2aC1XNHl6ODg3QkF3NTJIZFoyWFlodkdmN3RWdmY1eG9jTkkteG1NYzQxIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPGxpbmsgaHJlZj0iL0NvdW5jaWxfVGhlbWUvY3NzP3Y9NzltRkVGY2lyalUyUlc1bXJOQUREU3NkaEl4bk9FYmJnOExGelVHUDRZczEiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgPHNjcmlwdCBzcmM9Ii9Db3VuY2lsX1RoZW1lL2pzP3Y9Ij48L3NjcmlwdD4NCg0KDQogICAgPCEtLSBIVE1MNSBTaGltIGFuZCBSZXNwb25kLmpzIElFOCBzdXBwb3J0IG9mIEhUTUw1IGVsZW1lbnRzIGFuZCBtZWRpYSBxdWVyaWVzIC0tPg0KICAgIDwhLS0gV0FSTklORzogUmVzcG9uZC5qcyBkb2Vzbid0IHdvcmsgaWYgeW91IHZpZXcgdGhlIHBhZ2UgdmlhIGZpbGU6Ly8gLS0+DQogICAgPCEtLVtpZiBsdCBJRSA5XT4NCiAgICAgICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vb3NzLm1heGNkbi5jb20vbGlicy9odG1sNXNoaXYvMy43LjAvaHRtbDVzaGl2LmpzIj48L3NjcmlwdD4NCiAgICAgICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vb3NzLm1heGNkbi5jb20vbGlicy9yZXNwb25kLmpzLzEuNC4yL3Jlc3BvbmQubWluLmpzIj48L3NjcmlwdD4NCiAgICA8IVtlbmRpZl0tLT4NCjwvaGVhZD4NCg0KDQoNCjxib2R5Pg0KICAgIDxkaXYgY2xhc3M9InB1c2htZW51IGNicC1zcG1lbnUtcHVzaCI+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICA8aGVhZGVyIGlkPSJIZWFkZXIiPg0KICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCIgcm9sZT0ibmF2aWdhdGlvbiIgaWQ9Ik5hdkJhciI+DQogICAgICAgICAgICAgICAgICAgIDwhLS0gQnJhbmQgYW5kIHRvZ2dsZSBnZXQgZ3JvdXBlZCBmb3IgYmV0dGVyIG1vYmlsZSBkaXNwbGF5IC0tPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InV0aWxzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3LmJ1bmRhYmVyZy5xbGQuZ292LmF1IiB0YXJnZXQ9Il9ibGFuayI+SG9tZTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuYnVuZGFiZXJnLnFsZC5nb3YuYXUvY291bmNpbC9jdXN0b21lci1zZXJ2aWNlIiB0YXJnZXQ9Il9ibGFuayI+Q29udGFjdCBVczwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuYnVuZGFiZXJnLnFsZC5nb3YuYXUvcHJpdmFjeSIgdGFyZ2V0PSJfYmxhbmsiPlByaXZhY3kgUG9saWN5PC9hPjwvbGk+DQo8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8aDEgaWQ9ImxvZ28iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmJ1bmRhYmVyZy5xbGQuZ292LmF1Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9Db3VuY2lsX1RoZW1lL0J1bmRhYmVyZy9icmMtbG9nby5wbmciIGFsdD0iQnVuZGFiZXJnIFJlZ2lvbmFsIENvdW5jaWwiPjxzdHJvbmcgY2xhc3M9InZoIj5CdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbDwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDE+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvbmF2Pg0KDQoNCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJiYW5uZXIiPg0KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL0NvdW5jaWxfVGhlbWUvQnVuZGFiZXJnL2Jhbm5lci5qcGciPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8L2hlYWRlcj4NCg0KICAgICAgICAgICAgPGRpdiBpZD0iY29udGVudCI+DQogICAgICAgICAgICAgICAgPCEtLSBOYXZpZ2F0aW9uIC0tPg0KICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCBuYXZiYXItc3RhdGljLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDAiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0ibmF2YmFyLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iLm5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBuYXZpZ2F0aW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2YmFyLWJyYW5kIiBocmVmPSIvSG9tZS9JbmRleCI+PC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdmJhci1oZWFkZXIgLS0+DQogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdmJhci10b3AtbGlua3MgbmF2YmFyLXJpZ2h0IGhpZGRlbi14cyBoaWRkZW4tc20gaGlkZGVuLW1kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48c3BhbiBpZD0icHJpbnRJY29uIiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1wcmludCIgb25jbGljaz0id2luZG93LnByaW50KCk7Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgPC91bD4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItZGVmYXVsdCBzaWRlYmFyIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNpZGViYXItbmF2IG5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYiIGlkPSJzaWRlLW1lbnUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbiBUcmFja2VyPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvQWJvdXQgdGFyZ2V0PV9zZWxmPldoYXQgaXMgQXBwbGljYXRpb24gVHJhY2tlcj88L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvRGlzY2xhaW1lciB0YXJnZXQ9X3NlbGY+RGlzY2xhaW1lcjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnM8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9JbmRleCB0YXJnZXQ9PkFwcGxpY2F0aW9uIFRyYWNrZXIgSG9tZTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9TZWFyY2ggaWQ9c2VhcmNoIHRhcmdldD1fc2VsZj5TZWFyY2g8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P1JlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9VHJ1ZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgaWQ9b3V0c3RhbmRpbmctYXBwcyB0YXJnZXQ9X3NlbGY+VW5kZXRlcm1pbmVkIEFwcGxpY2F0aW9uczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/UmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPVRydWUmSW5jbHVkZURvY3VtZW50cz1GYWxzZSBpZD1leGhpYml0ZWQtYXBwcyB0YXJnZXQ9X3NlbGY+QXBwbGljYXRpb25zIE9uIEV4aGliaXRpb248L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zIFN1Ym1pdHRlZDxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0yMCUyZjA3JTJmMjAyMCZEYXRlVG89MjElMmYwNyUyZjIwMjAmRGF0ZVR5cGU9MSZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTEyJTJmMDclMmYyMDIwJkRhdGVUbz0xOCUyZjA3JTJmMjAyMCZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MSUyZjA3JTJmMjAyMCZEYXRlVG89MjElMmYwNyUyZjIwMjAmRGF0ZVR5cGU9MSZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDYlMmYyMDIwJkRhdGVUbz0zMCUyZjA2JTJmMjAyMCZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zIERldGVybWluZWQ8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MjAlMmYwNyUyZjIwMjAmRGF0ZVRvPTIxJTJmMDclMmYyMDIwJkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTEyJTJmMDclMmYyMDIwJkRhdGVUbz0xOCUyZjA3JTJmMjAyMCZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDclMmYyMDIwJkRhdGVUbz0yMSUyZjA3JTJmMjAyMCZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+VGhpcyBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MSUyZjA2JTJmMjAyMCZEYXRlVG89MzAlMmYwNiUyZjIwMjAmRGF0ZVR5cGU9MiZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9VHJ1ZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5zaWRlYmFyLWNvbGxhcHNlIC0tPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdmJhci1zdGF0aWMtc2lkZSAtLT4NCiAgICAgICAgICAgICAgICA8L25hdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwYWdlLXdyYXBwZXIiPg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIA0KDQoNCiAgICA8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgICAgIDxoMj5BcHBsaWNhdGlvbjogQ29uY3VycmVuY2UgQWdlbmN5IEFzc2Vzc21lbnQgKDUzMi4yMDE5LjU3Ny4xKTwvaDI+DQogICAgPC9kaXY+DQogICAgPGg0PkRldGFpbGVkIGluZm9ybWF0aW9uIHJlbGF0ZWQgdG8gdGhlIGFwcGxpY2F0aW9uOjwvaDQ+DQogICAgPGJyIC8+DQogICAgPGRpdj4NCiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDpzaG93QWxsKCk7Ij5TaG93IEFsbDwvYT4gLw0KICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OmhpZGVBbGwoKTsiPkhpZGUgQWxsPC9hPg0KICAgIDwvZGl2Pg0KICAgIDxkaXYgaWQ9ImFwcGxpY2F0aW9uIj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJkZXRhaWxzIj48YSBocmVmPSIjIj5EZXRhaWxzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZXNjcmlwdGlvbjogPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9ImRlc2NyaXB0aW9uIj5BbWVuaXR5ICZhbXA7IEFlc3RoZXRpY3MgKFNoZWQpPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlN1Ym1pdHRlZCBEYXRlOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI5LzA0LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFR5cGU6IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkNvbmN1cnJlbmNlIEFnZW5jeSBBc3Nlc3NtZW50PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InByb3BlcnRpZXMiPjxhIGhyZWY9IiMiPlByb3BlcnRpZXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJwcm9wZXJ0eS1saXN0Ij4xMDUgTGFtYiBTdCwgV2Fsa2VydmFsZSA0NjcwIFFMRCAgKExvdDogMTYgUlA6IDEzNDY1KTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJwZW9wbGUiPjxhIGhyZWY9IiMiPlBlb3BsZTwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE93bmVyOiBDcmFpZyBCcm93bg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFwcGxpY2FudDogIEJ1bmR5IFNoZWRzDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJvZmZpY2VyIj48YSBocmVmPSIjIj5PZmZpY2VyPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0ib2ZmaWNlck5hbWUiPkdyYW50IEJhcnJpbmdlcjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJkZWNpc2lvbiI+PGEgaHJlZj0iIyI+RGVjaXNpb248L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFN0YXR1czogRGV0ZXJtaW5lZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGV0ZXJtaW5hdGlvbiBEYXRlOg0KMjEvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZXRlcm1pbmF0aW9uIFR5cGU6IEFwcHJvdmVkPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCiAgICAgICAgICAgIDxoMyBpZD0idHJhY2tpbmciPjxhIGhyZWY9IiMiPlRyYWNraW5nPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uLXdyYXAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+c3dpcGUgdGFibGUgdG8gdGhlIGxlZnQgdG8gcmV2ZWFsIG1vcmUgZGF0YTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWFycm93LXJpZ2h0IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkIG5vLWZvb3RlciI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RGVzY3JpcHRpb248L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+Q29tbWVuY2VkIERhdGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+Q29tcGxldGVkIERhdGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+TG9kZ2VtZW50PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI5LzA0LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQozMC8wNC8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkNvbmZpcm1hdGlvbiBOb3RpY2U8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMzAvMDQvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjA3LzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGVjaXNpb24gQ29uY3VycmVuY2UgQWdlbmN5PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjA4LzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyMS8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KDQoNCg0KDQogICAgICAgICAgICA8aDMgaWQ9InJlbGF0ZWRBcHBsaWNhdGlvbnMiPjxhIGhyZWY9IiMiPlJlbGF0ZWQgQXBwbGljYXRpb25zPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8Yj5ObyBkYXRhLjwvYj4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCg0KDQoNCg0KDQo8aDMgaWQ9ImRvY3VtZW50cyI+PGEgaHJlZj0iIyI+RG9jdW1lbnRzPC9hPjwvaDM+DQo8ZGl2Pg0KDQogICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGlkPSJkb2MtY291bnQiPlRvdGFsIG51bWJlciBvZiBkb2N1bWVudHM6IDI8L2Rpdj4NCiAgICAgICAgPHRhYmxlIGlkPSJkb2MtdGFibGUiIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkIG5vLWZvb3RlciI+DQogICAgICAgICAgICA8dGhlYWQ+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGg+UmVjb3JkIE51bWJlcjwvdGg+DQogICAgICAgICAgICAgICAgICAgIDx0aD5EZXNjcmlwdGlvbjwvdGg+DQogICAgICAgICAgICAgICAgICAgIDx0aD5Eb2N1bWVudCBUeXBlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgPHRoIHN0eWxlPSJkaXNwbGF5Om5vbmUiPlNpemU8L3RoPg0KICAgICAgICAgICAgICAgICAgICA8dGg+VmlldyBMaW5rPC90aD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjEgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD41NzcgLSBTaWduZWQgUmVmZXJyYWwgUmVzcG9uc2UgLSAxMDUgTGFtYiBTdHJlZXQgLSBCdW5keSBTaGVkcy0gMjEwNTIwMTkucGRmPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgUERGDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT0iZGlzcGxheTpub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjAwIE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYS5idW5kYWJlcmcucWxkLmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9UUdFVGZTM3hjVjEyaGdYZUxEWmRsUGxTczJTcmxLb3pSQlJlT3RDSS9wd0Nwc1VMM1hFaTAzVzY4K2t1TDlQQUtySHV3TTJJd01EaVdPZHVMTER6VXBhVzFVZFNrSmlFaG83eUNqZmxWZnlMMU0veG9WK2xLUT09JmFtcDtmaWxlTmFtZT01NzcrLStTaWduZWQrUmVmZXJyYWwrUmVzcG9uc2UrLSsxMDUrTGFtYitTdHJlZXQrLStCdW5keStTaGVkcy0rMjEwNTIwMTkucGRmLnBkZiIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KMiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjU3NyAtIFByb3Bvc2FsIC0gQnVuZHkgU2hlZHMgLSAxMDUgTGFtYiBTdCBXYWxrZXJ2YWxlIC0gMjkwNDIwMTkucGRmPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgUERGDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT0iZGlzcGxheTpub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjAwIE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYS5idW5kYWJlcmcucWxkLmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9Z3lNUDF4bEMxUG52SWtQTDR4aUJWdi8yR0c4RkF6RXExZk9rS2tmZmJNdHZZVDhGeUNkWE5YM2VtMTVPV0lhMU50UDI2eVRzWUl5TEg1YUlqNWNsYWc0QndIeEJZOWJhaTlUUDhhRmZwU2s9JmFtcDtmaWxlTmFtZT01NzcrLStQcm9wb3NhbCstK0J1bmR5K1NoZWRzKy0rMTA1K0xhbWIrU3QrV2Fsa2VydmFsZSstKzI5MDQyMDE5LnBkZi5wZGYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCg0KICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgPC90YWJsZT4NCjwvZGl2Pg0KDQoNCiAgICAgICAgICAgIDxoMyBpZD0iY29udGFjdFVzIj48YSBocmVmPSIjIj5Db250YWN0IFVzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5TaG91bGQgeW91IHdpc2ggdG8gY29udGFjdCBjb3VuY2lsIHRvIG1ha2UgZW5xdWlyaWVzIHJlZ2FyZGluZyBhcHBsaWNhdGlvbnMgZGlzcGxheWVkIG9uIHRoZSB3ZWJzaXRlLCBwbGVhc2UgY29udGFjdCBjb3VuY2lsIGVpdGhlciBieSBlbWFpbCA8YSBocmVmPSJtYWlsdG86Q0VPQGJ1bmRhYmVyZy5xbGQuZ292LmF1P3N1YmplY3Q9U3VibWlzc2lvbiBmb3IgYXBwbGljYXRpb24gKDUzMi4yMDE5LjU3Ny4xKSI+Q0VPQGJ1bmRhYmVyZy5xbGQuZ292LmF1PC9hPiwgcGhvbmUgMTMwMCA4ODMgNjk5IGR1cmluZyBub3JtYWwgb2ZmaWNlIGhvdXJzIG9yIGluIHdyaXRpbmcgdG8gUE8gQm94IDMxMzAsQlVOREFCRVJHIFFMRCA0NjcwDQogICAgICAgIC4gQWxsIGNvcnJlc3BvbmRlbmNlIHNob3VsZCBiZSBhZGRyZXNzZWQgdG8gdGhlIEdlbmVyYWwgTWFuYWdlciBhbmQgcXVvdGUgdGhlIHJlbGV2YW50IGFwcGxpY2F0aW9uIHJlZmVyZW5jZSBudW1iZXIuDQo8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KPGgzIGlkPSJnb29nbGVtYXBzIj48YSBocmVmPSIjIj5Hb29nbGUgTWFwczwvYT48L2gzPg0KPGRpdiBpZD0ibWFwX2NvbnRhaW5lciI+DQogICAgPGRpdiBpZD0ibWFwX2NhbnZhcyIgY2xhc3M9ImlmcmFtZS1yd2QiPg0KICAgIDwvZGl2Pg0KPC9kaXY+DQoNCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCg0KICAgIHdpbmRvdy5vbmxvYWQgPSBsb2FkR29vZ2xlTWFwc1NjcmlwdDsNCg0KICAgIHZhciBnZW9jb2RlcjsNCiAgICB2YXIgbWFwOw0KICAgIHZhciB0aW1lb3V0ID0gMzAwOw0KICAgIHZhciBwcm9wZXJ0aWVzID0gWyIxMDUgTGFtYiBTdCwgV2Fsa2VydmFsZSA0NjcwIFFMRCAiXTsNCiAgICB2YXIgbGF0TG5nQXJyID0gW107DQoNCiAgICBmdW5jdGlvbiBsb2FkR29vZ2xlTWFwc1NjcmlwdCgpIHsNCiAgICAgICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpOw0KICAgICAgICBzY3JpcHQudHlwZSA9ICJ0ZXh0L2phdmFzY3JpcHQiOw0KICAgICAgICBzY3JpcHQuc3JjID0gIi8vbWFwcy5nb29nbGVhcGlzLmNvbS9tYXBzL2FwaS9qcz9rZXk9QUl6YVN5QTVIWWdhWEJjbWFRZTIwSFd2dnFkV2drZFA5Ry1yZkhjJmNhbGxiYWNrPWxvYWRHb29nbGVNYXBzIjsNCiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHJlbmRlckdvb2dsZU1hcHMoKQ0KICAgIHsNCiAgICAgICAgdmFyIG1hcE9wdGlvbnMgPSB7DQogICAgICAgICAgICBjZW50ZXI6IGxhdExuZ0FyclswXSwNCiAgICAgICAgICAgIHpvb206IDE2LA0KICAgICAgICAgICAgbWFwVHlwZUlkOiBnb29nbGUubWFwcy5NYXBUeXBlSWQuUk9BRE1BUCwNCiAgICAgICAgICAgIG1hcFR5cGVDb250cm9sOiBmYWxzZQ0KICAgICAgICB9DQoNCiAgICAgICAgbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibWFwX2NhbnZhcyIpLCBtYXBPcHRpb25zKTsNCg0KICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGREb21MaXN0ZW5lcih3aW5kb3csICdyZXNpemUnLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIHZhciBjZW50ZXIgPSBtYXAuZ2V0Q2VudGVyKCk7DQogICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC50cmlnZ2VyKG1hcCwgJ3Jlc2l6ZScpOw0KICAgICAgICAgICAgbWFwLnNldENlbnRlcihjZW50ZXIpOw0KICAgICAgICB9KTsNCg0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGxvYWRHb29nbGVNYXBzKCkgew0KICAgICAgICBnZW9jb2RlciA9IG5ldyBnb29nbGUubWFwcy5HZW9jb2RlcigpOw0KICAgICAgICB2YXIgbm9PZkZhaWxlZExvY2F0aW9uU2VhcmNoID0gMDsNCg0KICAgICAgICAkKHByb3BlcnRpZXMpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7DQogICAgICAgICAgICB2YXIgcHJvcGVydHlBZGRyZXNzID0gZWxlbWVudDsNCg0KICAgICAgICAgICAgLy9HZXQgZ2VvY29kZQ0KICAgICAgICAgICAgZ2VvY29kZXIuZ2VvY29kZSh7ICdhZGRyZXNzJzogcHJvcGVydHlBZGRyZXNzIH0sIGZ1bmN0aW9uIChyZXN1bHRzLCBzdGF0dXMpIHsNCiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09IGdvb2dsZS5tYXBzLkdlb2NvZGVyU3RhdHVzLk9LKSB7DQoNCiAgICAgICAgICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gcmVzdWx0c1swXS5nZW9tZXRyeS5sb2NhdGlvbjsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGxhdExuZyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcobG9jYXRpb24ubGF0KCksIGxvY2F0aW9uLmxuZygpKTsNCg0KICAgICAgICAgICAgICAgICAgICBsYXRMbmdBcnIucHVzaChsYXRMbmcpOw0KDQogICAgICAgICAgICAgICAgICAgIGlmKGxhdExuZ0Fyci5sZW5ndGggPT0gMSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyR29vZ2xlTWFwcygpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgLy9DcmVhdGUgbWFya2VyIGZvciBtYXAgYW5kIHBsYWNlIGl0IG9uIHRoZSBtYXANCiAgICAgICAgICAgICAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoew0KICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGxhdExuZywNCiAgICAgICAgICAgICAgICAgICAgICAgIG1hcDogbWFwDQogICAgICAgICAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50U3RyaW5nID0gJzxkaXY+PHNwYW4+JyArIHByb3BlcnR5QWRkcmVzcyArICc8L3NwYW4+PC9kaXY+JzsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGluZm93aW5kb3cgPSBuZXcgZ29vZ2xlLm1hcHMuSW5mb1dpbmRvdyh7ICAgLy9DcmVhdGUgaW5mbyB3aW5kb3cNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnRTdHJpbmcNCiAgICAgICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFya2VyLCAnY2xpY2snLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGluZm93aW5kb3cub3BlbihtYXAsIG1hcmtlcik7DQogICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAvL2lmIG5vIGxvY2F0aW9uIGZvdW5kIGJ5IGdvb2dsZSBmb3IgYSBwcm9wZXJ0eQ0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKHN0YXR1cyA9PSAiWkVST19SRVNVTFRTIikgew0KICAgICAgICAgICAgICAgICAgICBub09mRmFpbGVkTG9jYXRpb25TZWFyY2grKzsNCg0KICAgICAgICAgICAgICAgICAgICBpZihub09mRmFpbGVkTG9jYXRpb25TZWFyY2ggPT0gJChwcm9wZXJ0aWVzKS5sZW5ndGgpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VHb29nbGVNYXBzQ29udGVudCgpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PSBnb29nbGUubWFwcy5HZW9jb2RlclN0YXR1cy5PVkVSX1FVRVJZX0xJTUlUKSB7DQogICAgICAgICAgICAgICAgICAgIC8vc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IGdldEdlb0NvZGVGb3JBZGRyZXNzKGlkLCBhZGRyZXNzKTsgfSwgKHRpbWVvdXQpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfSk7DQogICAgfQ0KDQogICAgLy9SZXBsYWNlcyBnb29nbGUgbWFwcyBjb250ZW50IHdpdGggYSBuZXcgZGl2IGJsb2NrIHRoYXQgaGFzIGluZm8gbWVzc2FnZQ0KICAgIGZ1bmN0aW9uIHJlcGxhY2VHb29nbGVNYXBzQ29udGVudCgpIHsNCiAgICAgICAgdmFyIG5ld0NvbnRlbnQgPSAnPGRpdiBjbGFzcz0idWktYWNjb3JkaW9uLWNvbnRlbnQgdWktaGVscGVyLXJlc2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1ib3R0b20iPicgKw0KICAgICAgICAgICAgJzxwPkNvdWxkblwndCBmaW5kIHRoZSBwcm9wZXJ0eSBhZGRyZXNzKGVzKSBvbiBHb29nbGUgTWFwcy4gPHA+JyArDQogICAgICAgICAgICAnPC9kaXY+JzsNCg0KICAgICAgICAkKCcjbWFwX2NvbnRhaW5lcicpLnJlcGxhY2VXaXRoKG5ld0NvbnRlbnQpOw0KICAgIH0NCg0KPC9zY3JpcHQ+DQoNCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIiBpZD0ic3VibWlzc2lvbi1tb2RhbCI+DQogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcGlubmVyIj48L2Rpdj4gPCEtLSBUaGlzIGRpdiBob3N0cyB0aGUgc3Bpbm5lciAtLT4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2xvc2UiIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGFyaWEtbGFiZWw9IkNsb3NlIj48c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSI+JnRpbWVzOzwvc3Bhbj48L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJtb2RhbC10aXRsZSI+U3VibWlzc2lvbiBmb3IgNTMyLjIwMTkuNTc3LjE8L2gyPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCg0KICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHsNCg0KICAgICAgICAkKCcjYXBwbGljYXRpb24nKS50b2dnbGVwYW5lbHMoKTsNCg0KICAgICAgICAgICAgJCgnI3Byb3BlcnRpZXMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2RldGFpbHMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI3RyYWNraW5nJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNkb2N1bWVudHMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI3JlbGF0ZWRBcHBsaWNhdGlvbnMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2dvb2dsZW1hcHMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2NvbnRhY3RVcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZXhoaWJpdGlvbkRldGFpbHMnKS5jbGljaygpOw0KDQogICAgICAgIA0KDQoNCiAgICAgICAgJCgnI3N1Ym1pc3Npb24tYnRuJykuY2xpY2soZnVuY3Rpb24gKCkgeyAgICAgICAgDQoNCg0KICAgICAgICAgICAgdmFyIHVybCA9ICJodHRwczovL2RhLmJ1bmRhYmVyZy5xbGQuZ292LmF1Ly9BcHBsaWNhdGlvbi9TdWJtaXNzaW9uLyIgKyBlbmNvZGVVUkkoIjUzMi4yMDE5LjU3Ny4xIik7DQoNCiAgICAgICAgICAgICQoJyNzdWJtaXNzaW9uLW1vZGFsJykubW9kYWwoJ3Nob3cnKS5maW5kKCcubW9kYWwtYm9keScpLmxvYWQodXJsKTsNCiAgICAgICAgfSk7DQogICAgfSk7DQoNCg0KICAgIC8qIFNob3dzIGFsbCB0aGUgcGFuZWxzICovDQogICAgZnVuY3Rpb24gc2hvd0FsbCgpIHsNCiAgICAgICAgJCgnI2FwcGxpY2F0aW9uJykuY2hpbGRyZW4oImgzIikuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygidWktc3RhdGUtZGVmYXVsdCIpKSB7DQogICAgICAgICAgICAgICAgJCh0aGlzKS5jbGljaygpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICB9DQoNCg0KICAgIC8qIEhpZGUgYWxsIHRoZSBwYW5lbHMgKi8NCiAgICBmdW5jdGlvbiBoaWRlQWxsKCkgew0KICAgICAgICAkKCcjYXBwbGljYXRpb24nKS5jaGlsZHJlbigiaDMiKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCJ1aS1zdGF0ZS1hY3RpdmUiKSkgew0KICAgICAgICAgICAgICAgICQodGhpcykuY2xpY2soKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgfQ0KDQogICAgPC9zY3JpcHQ+DQoNCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwhLS0gLy5jb250YWluZXItZmx1aWQgLS0+DQoNCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8jcGFnZS13cmFwcGVyIC0tPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KICAgICAgICAgICAgPGRpdiBpZD0iR3JlZW5CYXIiPg0KICAgICAgICAgICAgICAgIDxhPkNvcHlyaWdodCDCqSAyMDE3IEJ1bmRhYmVyZyBSZWdpb25hbCBDb3VuY2lsLiBBbGwgcmlnaHRzIHJlc2VydmVkPC9hPg0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KDQogICAgPGRpdiBpZD0idGlwdGlwX2hvbGRlciIgc3R5bGU9Im1heC13aWR0aDozMDBweDsiPjxkaXYgaWQ9InRpcHRpcF9hcnJvdyI+PGRpdiBpZD0idGlwdGlwX2Fycm93X2lubmVyIj48L2Rpdj48L2Rpdj48ZGl2IGlkPSJ0aXB0aXBfY29udGVudCI+PC9kaXY+PC9kaXY+DQo8L2JvZHk+DQoNCjwvaHRtbD4NCg==
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/532.2019.00000581.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '28028'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:18:42 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 e0cb6c9d540bf5ec954ac9d625103a85.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - vs71aD_Q3O5_x5VaCvqRdUwTg67HNC4VmybKAu-CbGNH4ZVG69U9QA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/532.2019.00000572.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '25768'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:18:44 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 0b0c68b7b5c3bef408aa83b176024b1f.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - uIVFKqGbwxUxzQYbTKsZQeZRA7FXCYm3E-Ni0d26yULoJYvuvdcKyw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/532.2019.00000582.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '27174'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:18:45 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 b53881e988d60469224197aff16f631a.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - mvsVw54Ow9fW3XvXoS8UhtHwX0UJGiRgDr2I-O5T0r-8BAMUx-vRUA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/532.2019.00000578.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '29421'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:18:46 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 2e6ae2988ecce7b36779066f9365ab2d.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - dY0m_nnumSE4s17DJIaUuBs1A45owCVuHJnrZB_KSdA7KYnX6zrCAQ==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/532.2019.00000571.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '28365'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:18:48 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 ee71cd8922eab5657dc27cac15f87d5a.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - iqL1ak_lZ5-n2OWykya3vAuLPOelSHI8SodE6RrCY1-0EHVDq23ReQ==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/532.2019.00000580.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '27963'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:18:50 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 c8cc849f9c5ed132231369ce1abdad90.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - 8B8t1MOja0SYue2paiJVj3eJn81dsi-DCoDtInzxs6ScNI1OiriHkA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/521.2019.00000107.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '31332'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:18:54 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 0b0c68b7b5c3bef408aa83b176024b1f.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - yOyuS3zT9a0RpEr41XZcUXMrgejPv0fyqJtsHM7BkJxV-p0FgijpEQ==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/532.2019.00000579.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '26772'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:18:57 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 38264aca9bab114a0bd19db8ab8521dd.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - 2IPZvSULVWSRN5R8RKGBEj52vriFuy4-iUKpT1iGwlGPXRw81yp2KQ==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/532.2019.00000576.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '28904'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:18:58 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 5ebaca8d6e5215e8aae2e8c7eead166f.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - Nc_ZTfXeQWoRn5IpurO-3pqrXYee4TyiJONUG_mscug2KYBkUbn_kw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/532.2019.00000573.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '29946'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:19:01 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 8e87a55994813d8ad6e355c04ba8d3ba.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - xXRRBfVp5SZKRPhfB8NVgshA_VB53QT6ZgdLtdaOse0iZFB_bXawQA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iQnVuZGFiZXJnIFJlZ2lvbmFsIENvdW5jaWwsREEgVHJhY2tlcixEZXZlbG9wbWVudCBBcHBsaWNhdGlvbixEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBUcmFja2luZywgREEgRW5xdWlyeSwgRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gRW5xdWlyeSwgQXBwbGljYXRpb24gVHJhY2tlciI+DQogICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IlRoZSBvZmZpY2lhbCBCdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCg0KICAgIDx0aXRsZT5CdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbCAtIEFwcGxpY2F0aW9uIFRyYWNrZXI8L3RpdGxlPg0KDQogICAgPCEtLWZhdmljb24tLT4NCiAgICA8bGluayBocmVmPSIvZmF2aWNvbi5pY28iIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIj4NCg0KICAgIDwhLS0galF1ZXJ5IC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvYnVuZGxlcy9qcXVlcnk/dj1OOVgzMW9qMjRsbGkxdVZGcFg2dWowTTJXZE43R2RnTWpudllFVW9JeDdzMSI+PC9zY3JpcHQ+DQoNCiAgICA8c2NyaXB0IHNyYz0iL2J1bmRsZXMvanF1ZXJ5dWk/dj1tbTN2MlBwR1VrRFVyaUU2YnpKdVRscWJfdFZqbVdFR2o0aTRnU0o3aXBVMSI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS9qcXVlcnk/dj1yY0F2OENjR2tGcnZaWlpxTzZJaHBYb0hQa05FQ2k1SVBHLUhCRjFCYjEwMSIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gQm9vdHN0cmFwIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvYnVuZGxlcy9ib290c3RyYXA/dj13TUZCSUlaNk9zVUNlMXFPU2xSTlNfNmhHQkpnZkNFMDVWaDFHekNwcFlvMSI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9ib290c3RyYXA/dj1tS3NvR3lsTHpnOFhBOW5RaDV2dkJtMHV2Vi1LOHBiNVhUcmFEQ3M0a2JNMSIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWU/dj1ERU5YTmNRV0NVcVhMV213NGo1VUxQUFRwd2dXZ1E4RGo5YlFCRHFDNmFnMSIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gRGF0YVRhYmxlcyAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL2J1bmRsZXMvZGF0YVRhYmxlcz92PVVIWUR4TzhWVmgyUmdDbWlWVU0tM0NpdmJfUTJjR2NieE1TVXhnRnViWEExIj48L3NjcmlwdD4NCg0KICAgIA0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L0RhdGFUYWJsZXMvY3NzP3Y9ZWtvMElPbWhlN2Myd0E0WVlGNURMX0NuRzR3b2k2ZTRYa0gzSHl4M1luZzEiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCBTQi1BZG1pbi0yIFBsdWdpbiBhbmQgb3RoZXIgY3NzIGFuZCBqcyBmaWxlcy0tPg0KICAgIDxzY3JpcHQgc3JjPSIvanMvanNGb2xkZXI/dj0xZmh3ajFpb2NHMjg5bW5GQVMtYU9Dd3hRdWVFQTJCYW5qb3pHb2JFMzNvMSI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvY3NzL2Nzc0ZvbGRlcj92PXl2aC1XNHl6ODg3QkF3NTJIZFoyWFlodkdmN3RWdmY1eG9jTkkteG1NYzQxIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPGxpbmsgaHJlZj0iL0NvdW5jaWxfVGhlbWUvY3NzP3Y9NzltRkVGY2lyalUyUlc1bXJOQUREU3NkaEl4bk9FYmJnOExGelVHUDRZczEiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgPHNjcmlwdCBzcmM9Ii9Db3VuY2lsX1RoZW1lL2pzP3Y9Ij48L3NjcmlwdD4NCg0KDQogICAgPCEtLSBIVE1MNSBTaGltIGFuZCBSZXNwb25kLmpzIElFOCBzdXBwb3J0IG9mIEhUTUw1IGVsZW1lbnRzIGFuZCBtZWRpYSBxdWVyaWVzIC0tPg0KICAgIDwhLS0gV0FSTklORzogUmVzcG9uZC5qcyBkb2Vzbid0IHdvcmsgaWYgeW91IHZpZXcgdGhlIHBhZ2UgdmlhIGZpbGU6Ly8gLS0+DQogICAgPCEtLVtpZiBsdCBJRSA5XT4NCiAgICAgICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vb3NzLm1heGNkbi5jb20vbGlicy9odG1sNXNoaXYvMy43LjAvaHRtbDVzaGl2LmpzIj48L3NjcmlwdD4NCiAgICAgICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vb3NzLm1heGNkbi5jb20vbGlicy9yZXNwb25kLmpzLzEuNC4yL3Jlc3BvbmQubWluLmpzIj48L3NjcmlwdD4NCiAgICA8IVtlbmRpZl0tLT4NCjwvaGVhZD4NCg0KDQoNCjxib2R5Pg0KICAgIDxkaXYgY2xhc3M9InB1c2htZW51IGNicC1zcG1lbnUtcHVzaCI+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICA8aGVhZGVyIGlkPSJIZWFkZXIiPg0KICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCIgcm9sZT0ibmF2aWdhdGlvbiIgaWQ9Ik5hdkJhciI+DQogICAgICAgICAgICAgICAgICAgIDwhLS0gQnJhbmQgYW5kIHRvZ2dsZSBnZXQgZ3JvdXBlZCBmb3IgYmV0dGVyIG1vYmlsZSBkaXNwbGF5IC0tPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InV0aWxzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3LmJ1bmRhYmVyZy5xbGQuZ292LmF1IiB0YXJnZXQ9Il9ibGFuayI+SG9tZTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuYnVuZGFiZXJnLnFsZC5nb3YuYXUvY291bmNpbC9jdXN0b21lci1zZXJ2aWNlIiB0YXJnZXQ9Il9ibGFuayI+Q29udGFjdCBVczwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuYnVuZGFiZXJnLnFsZC5nb3YuYXUvcHJpdmFjeSIgdGFyZ2V0PSJfYmxhbmsiPlByaXZhY3kgUG9saWN5PC9hPjwvbGk+DQo8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8aDEgaWQ9ImxvZ28iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmJ1bmRhYmVyZy5xbGQuZ292LmF1Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9Db3VuY2lsX1RoZW1lL0J1bmRhYmVyZy9icmMtbG9nby5wbmciIGFsdD0iQnVuZGFiZXJnIFJlZ2lvbmFsIENvdW5jaWwiPjxzdHJvbmcgY2xhc3M9InZoIj5CdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbDwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDE+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvbmF2Pg0KDQoNCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJiYW5uZXIiPg0KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL0NvdW5jaWxfVGhlbWUvQnVuZGFiZXJnL2Jhbm5lci5qcGciPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8L2hlYWRlcj4NCg0KICAgICAgICAgICAgPGRpdiBpZD0iY29udGVudCI+DQogICAgICAgICAgICAgICAgPCEtLSBOYXZpZ2F0aW9uIC0tPg0KICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCBuYXZiYXItc3RhdGljLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDAiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0ibmF2YmFyLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iLm5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBuYXZpZ2F0aW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2YmFyLWJyYW5kIiBocmVmPSIvSG9tZS9JbmRleCI+PC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdmJhci1oZWFkZXIgLS0+DQogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdmJhci10b3AtbGlua3MgbmF2YmFyLXJpZ2h0IGhpZGRlbi14cyBoaWRkZW4tc20gaGlkZGVuLW1kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48c3BhbiBpZD0icHJpbnRJY29uIiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1wcmludCIgb25jbGljaz0id2luZG93LnByaW50KCk7Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgPC91bD4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItZGVmYXVsdCBzaWRlYmFyIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNpZGViYXItbmF2IG5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYiIGlkPSJzaWRlLW1lbnUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbiBUcmFja2VyPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvQWJvdXQgdGFyZ2V0PV9zZWxmPldoYXQgaXMgQXBwbGljYXRpb24gVHJhY2tlcj88L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvRGlzY2xhaW1lciB0YXJnZXQ9X3NlbGY+RGlzY2xhaW1lcjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnM8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9JbmRleCB0YXJnZXQ9PkFwcGxpY2F0aW9uIFRyYWNrZXIgSG9tZTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9TZWFyY2ggaWQ9c2VhcmNoIHRhcmdldD1fc2VsZj5TZWFyY2g8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P1JlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9VHJ1ZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgaWQ9b3V0c3RhbmRpbmctYXBwcyB0YXJnZXQ9X3NlbGY+VW5kZXRlcm1pbmVkIEFwcGxpY2F0aW9uczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/UmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPVRydWUmSW5jbHVkZURvY3VtZW50cz1GYWxzZSBpZD1leGhpYml0ZWQtYXBwcyB0YXJnZXQ9X3NlbGY+QXBwbGljYXRpb25zIE9uIEV4aGliaXRpb248L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zIFN1Ym1pdHRlZDxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0yMCUyZjA3JTJmMjAyMCZEYXRlVG89MjElMmYwNyUyZjIwMjAmRGF0ZVR5cGU9MSZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTEyJTJmMDclMmYyMDIwJkRhdGVUbz0xOCUyZjA3JTJmMjAyMCZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MSUyZjA3JTJmMjAyMCZEYXRlVG89MjElMmYwNyUyZjIwMjAmRGF0ZVR5cGU9MSZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDYlMmYyMDIwJkRhdGVUbz0zMCUyZjA2JTJmMjAyMCZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zIERldGVybWluZWQ8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MjAlMmYwNyUyZjIwMjAmRGF0ZVRvPTIxJTJmMDclMmYyMDIwJkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTEyJTJmMDclMmYyMDIwJkRhdGVUbz0xOCUyZjA3JTJmMjAyMCZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDclMmYyMDIwJkRhdGVUbz0yMSUyZjA3JTJmMjAyMCZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+VGhpcyBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MSUyZjA2JTJmMjAyMCZEYXRlVG89MzAlMmYwNiUyZjIwMjAmRGF0ZVR5cGU9MiZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9VHJ1ZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5zaWRlYmFyLWNvbGxhcHNlIC0tPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdmJhci1zdGF0aWMtc2lkZSAtLT4NCiAgICAgICAgICAgICAgICA8L25hdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwYWdlLXdyYXBwZXIiPg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIA0KDQoNCiAgICA8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgICAgIDxoMj5BcHBsaWNhdGlvbjogQ29uY3VycmVuY2UgQWdlbmN5IEFzc2Vzc21lbnQgKDUzMi4yMDE5LjU3My4xKTwvaDI+DQogICAgPC9kaXY+DQogICAgPGg0PkRldGFpbGVkIGluZm9ybWF0aW9uIHJlbGF0ZWQgdG8gdGhlIGFwcGxpY2F0aW9uOjwvaDQ+DQogICAgPGJyIC8+DQogICAgPGRpdj4NCiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDpzaG93QWxsKCk7Ij5TaG93IEFsbDwvYT4gLw0KICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OmhpZGVBbGwoKTsiPkhpZGUgQWxsPC9hPg0KICAgIDwvZGl2Pg0KICAgIDxkaXYgaWQ9ImFwcGxpY2F0aW9uIj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJkZXRhaWxzIj48YSBocmVmPSIjIj5EZXRhaWxzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZXNjcmlwdGlvbjogPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9ImRlc2NyaXB0aW9uIj5BbWVuaXR5ICZhbXA7IEFlc3RoZXRpY3MgYW5kIERlc2lnbiAmYW1wOyBTaXRpbmcgKEV4dGVuc2lvbiB0byBFeGlzdGluZyBTaGVkKTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5TdWJtaXR0ZWQgRGF0ZTogPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxOC8wNC8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BcHBsaWNhdGlvbiBUeXBlOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Db25jdXJyZW5jZSBBZ2VuY3kgQXNzZXNzbWVudDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJwcm9wZXJ0aWVzIj48YSBocmVmPSIjIj5Qcm9wZXJ0aWVzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0icHJvcGVydHktbGlzdCI+MTUgT3NwcmV5IERyLCBXb29kZ2F0ZSA0NjYwIFFMRCAgKExvdDogNCBSUDogMjI3NDUxKTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJwZW9wbGUiPjxhIGhyZWY9IiMiPlBlb3BsZTwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE93bmVyOiBSb25hbGQgTG93aWsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPd25lcjogRGVicmEgTG93aWsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBsaWNhbnQ6ICBHbWEgQ2VydGlmaWNhdGlvbiBHcm91cA0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0ib2ZmaWNlciI+PGEgaHJlZj0iIyI+T2ZmaWNlcjwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9Im9mZmljZXJOYW1lIj5EZWFuIENhdG9yYWxsPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9ImRlY2lzaW9uIj48YSBocmVmPSIjIj5EZWNpc2lvbjwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QXBwbGljYXRpb24gU3RhdHVzOiBEZXRlcm1pbmVkPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXRlcm1pbmF0aW9uIERhdGU6DQoxNC8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRldGVybWluYXRpb24gVHlwZTogQXBwcm92ZWQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KICAgICAgICAgICAgPGgzIGlkPSJ0cmFja2luZyI+PGEgaHJlZj0iIyI+VHJhY2tpbmc8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EZXNjcmlwdGlvbjwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db21tZW5jZWQgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db21wbGV0ZWQgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Mb2RnZW1lbnQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTgvMDQvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjIzLzA0LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QWN0aW9uIE5vdGljZSBSZXF1aXJlZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyMy8wNC8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjMvMDQvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5BY3Rpb24gTm90aWNlIFJlc3BvbnNlPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjIzLzA0LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyMy8wNC8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkNvbmZpcm1hdGlvbiBOb3RpY2U8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjMvMDQvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI5LzA0LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGVjaXNpb24gQ29uY3VycmVuY2UgQWdlbmN5PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjMwLzA0LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxNC8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KDQoNCg0KDQogICAgICAgICAgICA8aDMgaWQ9InJlbGF0ZWRBcHBsaWNhdGlvbnMiPjxhIGhyZWY9IiMiPlJlbGF0ZWQgQXBwbGljYXRpb25zPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8Yj5ObyBkYXRhLjwvYj4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCg0KDQoNCg0KDQo8aDMgaWQ9ImRvY3VtZW50cyI+PGEgaHJlZj0iIyI+RG9jdW1lbnRzPC9hPjwvaDM+DQo8ZGl2Pg0KDQogICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGlkPSJkb2MtY291bnQiPlRvdGFsIG51bWJlciBvZiBkb2N1bWVudHM6IDQ8L2Rpdj4NCiAgICAgICAgPHRhYmxlIGlkPSJkb2MtdGFibGUiIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkIG5vLWZvb3RlciI+DQogICAgICAgICAgICA8dGhlYWQ+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGg+UmVjb3JkIE51bWJlcjwvdGg+DQogICAgICAgICAgICAgICAgICAgIDx0aD5EZXNjcmlwdGlvbjwvdGg+DQogICAgICAgICAgICAgICAgICAgIDx0aD5Eb2N1bWVudCBUeXBlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgPHRoIHN0eWxlPSJkaXNwbGF5Om5vbmUiPlNpemU8L3RoPg0KICAgICAgICAgICAgICAgICAgICA8dGg+VmlldyBMaW5rPC90aD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjEgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD41NzMgLSBTaWduZWQgQWN0aW9uIE5vdGljZSAtIEdNQSBDZXJ0aWZpY2F0aW9uIEdyb3VwIC0gMTUgT3NwcmV5IERyaXZlIFdvb2RnYXRlIC0gMjMwNDIwMTkucGRmPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgUERGDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT0iZGlzcGxheTpub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjAwIE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYS5idW5kYWJlcmcucWxkLmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9Vmc1dkRKcGg1blN5ZjRVVnppWjdKRCtxdXlvWlBQZi9lYjNSbmlBQnFHc2JaSmcvdmpMM25GZmw5bU9Wa3hnaDh2eDMzUlh2ZmhCcXFGMTdPSkEybUdSZklHbUJ0MGxwcVdnZkRwUzJMV0ZHWUY1UENXeXZyd0U5U2VtRTAwS1dVclF0bGF0Tk82ND0mYW1wO2ZpbGVOYW1lPTU3MystK1NpZ25lZCtBY3Rpb24rTm90aWNlKy0rR01BK0NlcnRpZmljYXRpb24rR3JvdXArLSsxNStPc3ByZXkrRHJpdmUrV29vZGdhdGUrLSsyMzA0MjAxOS5wZGYucGRmIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+NTczIC0gUHJvcG9zYWwgLSBHTUEgQ2VydGlmaWNhdGlvbiBHcm91cCAtIDE1IE9zcHJleSBEcml2ZSBXb29kZ2F0ZSAtIDE4MDQyMDE5LnBkZjwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIFBERg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQgc3R5bGU9ImRpc3BsYXk6bm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4wMCBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGEuYnVuZGFiZXJnLnFsZC5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PUJSTXRuRUhISWxucUphckNVSG5aNVAvMkdHOEZBekVxVStia3lMd1B0c1FBUC9QQVA2QTBwcmtTR1BHZFdIaG8wbzdPb0JYMGlyWE5nVkMrYWpiKzJHczhWbzd6cDd0ZTNHUjk5UjRrRzVOK0M3dFhZMExBeUFoOGg5aGRxd1ZpJmFtcDtmaWxlTmFtZT01NzMrLStQcm9wb3NhbCstK0dNQStDZXJ0aWZpY2F0aW9uK0dyb3VwKy0rMTUrT3NwcmV5K0RyaXZlK1dvb2RnYXRlKy0rMTgwNDIwMTkucGRmLnBkZiIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KMyAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjU3MyAtIFNpZ25lZCBSZWZlcnJhbCBSZXNwb25zZSAtIEdNQSBDZXJ0aWZpY2F0aW9uIEdyb3VwIC0gMTUgT3NwcmV5IERyIFdvb2RnYXRlIC0gMTQwNTIwMTkucGRmPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgUERGDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT0iZGlzcGxheTpub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjAwIE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYS5idW5kYWJlcmcucWxkLmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9a1JtU0h5ajRjQ3F5ZjRVVnppWjdKUGxTczJTcmxLb3pSQlJlT3RDSS9wd0Nwc1VMM1hFaTAxUG01TWk4RDdiRUFEL3p3RCtnTkthNUVoanhuVmg0YU5LT3pxQVY5SXExellGUXZtbzIvdGhFZTBPMThQK29ibDIzWW1BTDZRQklmVzQ3TE1QRnp2Vk1oMUwzN1RrQnF3PT0mYW1wO2ZpbGVOYW1lPTU3MystK1NpZ25lZCtSZWZlcnJhbCtSZXNwb25zZSstK0dNQStDZXJ0aWZpY2F0aW9uK0dyb3VwKy0rMTUrT3NwcmV5K0RyK1dvb2RnYXRlKy0rMTQwNTIwMTkucGRmLnBkZiIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KNCAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjU3MyAtIFJlc3BvbnNlIHRvIEFjdGlvbiBOb3RpY2UgKENvbmZpcm1hdGlvbiBOb3RpY2UpIC0gR01BIENlcnRpZmljYXRpb24gR3JvdXAgUHR5IEx0ZCAtIDE1IE9zcHJleSBEciBXb29kZ2F0ZSAtIDIzMDQyMDE5LnBkZjwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIFBERg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQgc3R5bGU9ImRpc3BsYXk6bm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4wMCBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGEuYnVuZGFiZXJnLnFsZC5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PVVWc3dabVZJQS8rUWgzYUQyRXNJQkFLbXhRdmRjU0xURlVWS3pLbXA1RzNkS1MwQXZQYU56cHVmS0IxS25xc1BaNFRnNXZ0MUZHQ2liOGdndkdUMDRiM1V1QTVha3ZnalNFQ0dJU0FkQ1E0bGNVWGNhZWt4YmlhNkNoRnB2SmRtMTBhNzRFbk13dUd2Sm5PcFh6U2NEVVpnWGs4SmJLK3ZBVDFKNllUVFFwWlN0QzJWcTAwN3JnPT0mYW1wO2ZpbGVOYW1lPTU3MystK1Jlc3BvbnNlK3RvK0FjdGlvbitOb3RpY2UrKENvbmZpcm1hdGlvbitOb3RpY2UpKy0rR01BK0NlcnRpZmljYXRpb24rR3JvdXArUHR5K0x0ZCstKzE1K09zcHJleStEcitXb29kZ2F0ZSstKzIzMDQyMDE5LnBkZi5wZGYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCg0KICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgPC90YWJsZT4NCjwvZGl2Pg0KDQoNCiAgICAgICAgICAgIDxoMyBpZD0iY29udGFjdFVzIj48YSBocmVmPSIjIj5Db250YWN0IFVzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5TaG91bGQgeW91IHdpc2ggdG8gY29udGFjdCBjb3VuY2lsIHRvIG1ha2UgZW5xdWlyaWVzIHJlZ2FyZGluZyBhcHBsaWNhdGlvbnMgZGlzcGxheWVkIG9uIHRoZSB3ZWJzaXRlLCBwbGVhc2UgY29udGFjdCBjb3VuY2lsIGVpdGhlciBieSBlbWFpbCA8YSBocmVmPSJtYWlsdG86Q0VPQGJ1bmRhYmVyZy5xbGQuZ292LmF1P3N1YmplY3Q9U3VibWlzc2lvbiBmb3IgYXBwbGljYXRpb24gKDUzMi4yMDE5LjU3My4xKSI+Q0VPQGJ1bmRhYmVyZy5xbGQuZ292LmF1PC9hPiwgcGhvbmUgMTMwMCA4ODMgNjk5IGR1cmluZyBub3JtYWwgb2ZmaWNlIGhvdXJzIG9yIGluIHdyaXRpbmcgdG8gUE8gQm94IDMxMzAsQlVOREFCRVJHIFFMRCA0NjcwDQogICAgICAgIC4gQWxsIGNvcnJlc3BvbmRlbmNlIHNob3VsZCBiZSBhZGRyZXNzZWQgdG8gdGhlIEdlbmVyYWwgTWFuYWdlciBhbmQgcXVvdGUgdGhlIHJlbGV2YW50IGFwcGxpY2F0aW9uIHJlZmVyZW5jZSBudW1iZXIuDQo8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KPGgzIGlkPSJnb29nbGVtYXBzIj48YSBocmVmPSIjIj5Hb29nbGUgTWFwczwvYT48L2gzPg0KPGRpdiBpZD0ibWFwX2NvbnRhaW5lciI+DQogICAgPGRpdiBpZD0ibWFwX2NhbnZhcyIgY2xhc3M9ImlmcmFtZS1yd2QiPg0KICAgIDwvZGl2Pg0KPC9kaXY+DQoNCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCg0KICAgIHdpbmRvdy5vbmxvYWQgPSBsb2FkR29vZ2xlTWFwc1NjcmlwdDsNCg0KICAgIHZhciBnZW9jb2RlcjsNCiAgICB2YXIgbWFwOw0KICAgIHZhciB0aW1lb3V0ID0gMzAwOw0KICAgIHZhciBwcm9wZXJ0aWVzID0gWyIxNSBPc3ByZXkgRHIsIFdvb2RnYXRlIDQ2NjAgUUxEICJdOw0KICAgIHZhciBsYXRMbmdBcnIgPSBbXTsNCg0KICAgIGZ1bmN0aW9uIGxvYWRHb29nbGVNYXBzU2NyaXB0KCkgew0KICAgICAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7DQogICAgICAgIHNjcmlwdC50eXBlID0gInRleHQvamF2YXNjcmlwdCI7DQogICAgICAgIHNjcmlwdC5zcmMgPSAiLy9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL2pzP2tleT1BSXphU3lBNUhZZ2FYQmNtYVFlMjBIV3Z2cWRXZ2tkUDlHLXJmSGMmY2FsbGJhY2s9bG9hZEdvb2dsZU1hcHMiOw0KICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gcmVuZGVyR29vZ2xlTWFwcygpDQogICAgew0KICAgICAgICB2YXIgbWFwT3B0aW9ucyA9IHsNCiAgICAgICAgICAgIGNlbnRlcjogbGF0TG5nQXJyWzBdLA0KICAgICAgICAgICAgem9vbTogMTYsDQogICAgICAgICAgICBtYXBUeXBlSWQ6IGdvb2dsZS5tYXBzLk1hcFR5cGVJZC5ST0FETUFQLA0KICAgICAgICAgICAgbWFwVHlwZUNvbnRyb2w6IGZhbHNlDQogICAgICAgIH0NCg0KICAgICAgICBtYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtYXBfY2FudmFzIiksIG1hcE9wdGlvbnMpOw0KDQogICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZERvbUxpc3RlbmVyKHdpbmRvdywgJ3Jlc2l6ZScsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgdmFyIGNlbnRlciA9IG1hcC5nZXRDZW50ZXIoKTsNCiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIobWFwLCAncmVzaXplJyk7DQogICAgICAgICAgICBtYXAuc2V0Q2VudGVyKGNlbnRlcik7DQogICAgICAgIH0pOw0KDQogICAgfQ0KDQogICAgZnVuY3Rpb24gbG9hZEdvb2dsZU1hcHMoKSB7DQogICAgICAgIGdlb2NvZGVyID0gbmV3IGdvb2dsZS5tYXBzLkdlb2NvZGVyKCk7DQogICAgICAgIHZhciBub09mRmFpbGVkTG9jYXRpb25TZWFyY2ggPSAwOw0KDQogICAgICAgICQocHJvcGVydGllcykuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHsNCiAgICAgICAgICAgIHZhciBwcm9wZXJ0eUFkZHJlc3MgPSBlbGVtZW50Ow0KDQogICAgICAgICAgICAvL0dldCBnZW9jb2RlDQogICAgICAgICAgICBnZW9jb2Rlci5nZW9jb2RlKHsgJ2FkZHJlc3MnOiBwcm9wZXJ0eUFkZHJlc3MgfSwgZnVuY3Rpb24gKHJlc3VsdHMsIHN0YXR1cykgew0KICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT0gZ29vZ2xlLm1hcHMuR2VvY29kZXJTdGF0dXMuT0spIHsNCg0KICAgICAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb24gPSByZXN1bHRzWzBdLmdlb21ldHJ5LmxvY2F0aW9uOw0KICAgICAgICAgICAgICAgICAgICB2YXIgbGF0TG5nID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhsb2NhdGlvbi5sYXQoKSwgbG9jYXRpb24ubG5nKCkpOw0KDQogICAgICAgICAgICAgICAgICAgIGxhdExuZ0Fyci5wdXNoKGxhdExuZyk7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYobGF0TG5nQXJyLmxlbmd0aCA9PSAxKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJHb29nbGVNYXBzKCk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAvL0NyZWF0ZSBtYXJrZXIgZm9yIG1hcCBhbmQgcGxhY2UgaXQgb24gdGhlIG1hcA0KICAgICAgICAgICAgICAgICAgICB2YXIgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7DQogICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogbGF0TG5nLA0KICAgICAgICAgICAgICAgICAgICAgICAgbWFwOiBtYXANCiAgICAgICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRTdHJpbmcgPSAnPGRpdj48c3Bhbj4nICsgcHJvcGVydHlBZGRyZXNzICsgJzwvc3Bhbj48L2Rpdj4nOw0KICAgICAgICAgICAgICAgICAgICB2YXIgaW5mb3dpbmRvdyA9IG5ldyBnb29nbGUubWFwcy5JbmZvV2luZG93KHsgICAvL0NyZWF0ZSBpbmZvIHdpbmRvdw0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogY29udGVudFN0cmluZw0KICAgICAgICAgICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXJrZXIsICdjbGljaycsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgaW5mb3dpbmRvdy5vcGVuKG1hcCwgbWFya2VyKTsNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIC8vaWYgbm8gbG9jYXRpb24gZm91bmQgYnkgZ29vZ2xlIGZvciBhIHByb3BlcnR5DQogICAgICAgICAgICAgICAgZWxzZSBpZiAoc3RhdHVzID09ICJaRVJPX1JFU1VMVFMiKSB7DQogICAgICAgICAgICAgICAgICAgIG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCsrOw0KDQogICAgICAgICAgICAgICAgICAgIGlmKG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCA9PSAkKHByb3BlcnRpZXMpLmxlbmd0aCkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZUdvb2dsZU1hcHNDb250ZW50KCk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09IGdvb2dsZS5tYXBzLkdlb2NvZGVyU3RhdHVzLk9WRVJfUVVFUllfTElNSVQpIHsNCiAgICAgICAgICAgICAgICAgICAgLy9zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgZ2V0R2VvQ29kZUZvckFkZHJlc3MoaWQsIGFkZHJlc3MpOyB9LCAodGltZW91dCkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICAvL1JlcGxhY2VzIGdvb2dsZSBtYXBzIGNvbnRlbnQgd2l0aCBhIG5ldyBkaXYgYmxvY2sgdGhhdCBoYXMgaW5mbyBtZXNzYWdlDQogICAgZnVuY3Rpb24gcmVwbGFjZUdvb2dsZU1hcHNDb250ZW50KCkgew0KICAgICAgICB2YXIgbmV3Q29udGVudCA9ICc8ZGl2IGNsYXNzPSJ1aS1hY2NvcmRpb24tY29udGVudCB1aS1oZWxwZXItcmVzZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWJvdHRvbSI+JyArDQogICAgICAgICAgICAnPHA+Q291bGRuXCd0IGZpbmQgdGhlIHByb3BlcnR5IGFkZHJlc3MoZXMpIG9uIEdvb2dsZSBNYXBzLiA8cD4nICsNCiAgICAgICAgICAgICc8L2Rpdj4nOw0KDQogICAgICAgICQoJyNtYXBfY29udGFpbmVyJykucmVwbGFjZVdpdGgobmV3Q29udGVudCk7DQogICAgfQ0KDQo8L3NjcmlwdD4NCg0KICAgIDwvZGl2Pg0KICAgIDxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIGlkPSJzdWJtaXNzaW9uLW1vZGFsIj4NCiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InNwaW5uZXIiPjwvZGl2PiA8IS0tIFRoaXMgZGl2IGhvc3RzIHRoZSBzcGlubmVyIC0tPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPjxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPjwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9Im1vZGFsLXRpdGxlIj5TdWJtaXNzaW9uIGZvciA1MzIuMjAxOS41NzMuMTwvaDI+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgew0KDQogICAgICAgICQoJyNhcHBsaWNhdGlvbicpLnRvZ2dsZXBhbmVscygpOw0KDQogICAgICAgICAgICAkKCcjcHJvcGVydGllcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZGV0YWlscycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjdHJhY2tpbmcnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2RvY3VtZW50cycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjcmVsYXRlZEFwcGxpY2F0aW9ucycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZ29vZ2xlbWFwcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjY29udGFjdFVzJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNleGhpYml0aW9uRGV0YWlscycpLmNsaWNrKCk7DQoNCiAgICAgICAgDQoNCg0KICAgICAgICAkKCcjc3VibWlzc2lvbi1idG4nKS5jbGljayhmdW5jdGlvbiAoKSB7ICAgICAgICANCg0KDQogICAgICAgICAgICB2YXIgdXJsID0gImh0dHBzOi8vZGEuYnVuZGFiZXJnLnFsZC5nb3YuYXUvL0FwcGxpY2F0aW9uL1N1Ym1pc3Npb24vIiArIGVuY29kZVVSSSgiNTMyLjIwMTkuNTczLjEiKTsNCg0KICAgICAgICAgICAgJCgnI3N1Ym1pc3Npb24tbW9kYWwnKS5tb2RhbCgnc2hvdycpLmZpbmQoJy5tb2RhbC1ib2R5JykubG9hZCh1cmwpOw0KICAgICAgICB9KTsNCiAgICB9KTsNCg0KDQogICAgLyogU2hvd3MgYWxsIHRoZSBwYW5lbHMgKi8NCiAgICBmdW5jdGlvbiBzaG93QWxsKCkgew0KICAgICAgICAkKCcjYXBwbGljYXRpb24nKS5jaGlsZHJlbigiaDMiKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCJ1aS1zdGF0ZS1kZWZhdWx0IikpIHsNCiAgICAgICAgICAgICAgICAkKHRoaXMpLmNsaWNrKCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgIH0NCg0KDQogICAgLyogSGlkZSBhbGwgdGhlIHBhbmVscyAqLw0KICAgIGZ1bmN0aW9uIGhpZGVBbGwoKSB7DQogICAgICAgICQoJyNhcHBsaWNhdGlvbicpLmNoaWxkcmVuKCJoMyIpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoInVpLXN0YXRlLWFjdGl2ZSIpKSB7DQogICAgICAgICAgICAgICAgJCh0aGlzKS5jbGljaygpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICA8L3NjcmlwdD4NCg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLmNvbnRhaW5lci1mbHVpZCAtLT4NCg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwhLS0gLyNwYWdlLXdyYXBwZXIgLS0+DQogICAgICAgICAgICA8L2Rpdj4NCg0KDQogICAgICAgICAgICA8ZGl2IGlkPSJHcmVlbkJhciI+DQogICAgICAgICAgICAgICAgPGE+Q29weXJpZ2h0IMKpIDIwMTcgQnVuZGFiZXJnIFJlZ2lvbmFsIENvdW5jaWwuIEFsbCByaWdodHMgcmVzZXJ2ZWQ8L2E+DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQoNCiAgICA8ZGl2IGlkPSJ0aXB0aXBfaG9sZGVyIiBzdHlsZT0ibWF4LXdpZHRoOjMwMHB4OyI+PGRpdiBpZD0idGlwdGlwX2Fycm93Ij48ZGl2IGlkPSJ0aXB0aXBfYXJyb3dfaW5uZXIiPjwvZGl2PjwvZGl2PjxkaXYgaWQ9InRpcHRpcF9jb250ZW50Ij48L2Rpdj48L2Rpdj4NCjwvYm9keT4NCg0KPC9odG1sPg0K
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/532.2019.00000569.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '28498'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:19:03 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 f0e48f9301fb78afc5c0d0508ae31a23.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - 6NL8TMGX8msNCy9iov_NOG5CXR5OTkkFzYZBGMP6e9-Kb6TzijaXXA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iQnVuZGFiZXJnIFJlZ2lvbmFsIENvdW5jaWwsREEgVHJhY2tlcixEZXZlbG9wbWVudCBBcHBsaWNhdGlvbixEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBUcmFja2luZywgREEgRW5xdWlyeSwgRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gRW5xdWlyeSwgQXBwbGljYXRpb24gVHJhY2tlciI+DQogICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IlRoZSBvZmZpY2lhbCBCdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCg0KICAgIDx0aXRsZT5CdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbCAtIEFwcGxpY2F0aW9uIFRyYWNrZXI8L3RpdGxlPg0KDQogICAgPCEtLWZhdmljb24tLT4NCiAgICA8bGluayBocmVmPSIvZmF2aWNvbi5pY28iIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIj4NCg0KICAgIDwhLS0galF1ZXJ5IC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvYnVuZGxlcy9qcXVlcnk/dj1OOVgzMW9qMjRsbGkxdVZGcFg2dWowTTJXZE43R2RnTWpudllFVW9JeDdzMSI+PC9zY3JpcHQ+DQoNCiAgICA8c2NyaXB0IHNyYz0iL2J1bmRsZXMvanF1ZXJ5dWk/dj1tbTN2MlBwR1VrRFVyaUU2YnpKdVRscWJfdFZqbVdFR2o0aTRnU0o3aXBVMSI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC90aGVtZXMvYmFzZS9qcXVlcnk/dj1yY0F2OENjR2tGcnZaWlpxTzZJaHBYb0hQa05FQ2k1SVBHLUhCRjFCYjEwMSIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gQm9vdHN0cmFwIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvYnVuZGxlcy9ib290c3RyYXA/dj13TUZCSUlaNk9zVUNlMXFPU2xSTlNfNmhHQkpnZkNFMDVWaDFHekNwcFlvMSI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9ib290c3RyYXA/dj1tS3NvR3lsTHpnOFhBOW5RaDV2dkJtMHV2Vi1LOHBiNVhUcmFEQ3M0a2JNMSIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9mb250LWF3ZXNvbWU/dj1ERU5YTmNRV0NVcVhMV213NGo1VUxQUFRwd2dXZ1E4RGo5YlFCRHFDNmFnMSIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gRGF0YVRhYmxlcyAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL2J1bmRsZXMvZGF0YVRhYmxlcz92PVVIWUR4TzhWVmgyUmdDbWlWVU0tM0NpdmJfUTJjR2NieE1TVXhnRnViWEExIj48L3NjcmlwdD4NCg0KICAgIA0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L0RhdGFUYWJsZXMvY3NzP3Y9ZWtvMElPbWhlN2Myd0E0WVlGNURMX0NuRzR3b2k2ZTRYa0gzSHl4M1luZzEiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCBTQi1BZG1pbi0yIFBsdWdpbiBhbmQgb3RoZXIgY3NzIGFuZCBqcyBmaWxlcy0tPg0KICAgIDxzY3JpcHQgc3JjPSIvanMvanNGb2xkZXI/dj0xZmh3ajFpb2NHMjg5bW5GQVMtYU9Dd3hRdWVFQTJCYW5qb3pHb2JFMzNvMSI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvY3NzL2Nzc0ZvbGRlcj92PXl2aC1XNHl6ODg3QkF3NTJIZFoyWFlodkdmN3RWdmY1eG9jTkkteG1NYzQxIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPGxpbmsgaHJlZj0iL0NvdW5jaWxfVGhlbWUvY3NzP3Y9NzltRkVGY2lyalUyUlc1bXJOQUREU3NkaEl4bk9FYmJnOExGelVHUDRZczEiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgPHNjcmlwdCBzcmM9Ii9Db3VuY2lsX1RoZW1lL2pzP3Y9Ij48L3NjcmlwdD4NCg0KDQogICAgPCEtLSBIVE1MNSBTaGltIGFuZCBSZXNwb25kLmpzIElFOCBzdXBwb3J0IG9mIEhUTUw1IGVsZW1lbnRzIGFuZCBtZWRpYSBxdWVyaWVzIC0tPg0KICAgIDwhLS0gV0FSTklORzogUmVzcG9uZC5qcyBkb2Vzbid0IHdvcmsgaWYgeW91IHZpZXcgdGhlIHBhZ2UgdmlhIGZpbGU6Ly8gLS0+DQogICAgPCEtLVtpZiBsdCBJRSA5XT4NCiAgICAgICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vb3NzLm1heGNkbi5jb20vbGlicy9odG1sNXNoaXYvMy43LjAvaHRtbDVzaGl2LmpzIj48L3NjcmlwdD4NCiAgICAgICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vb3NzLm1heGNkbi5jb20vbGlicy9yZXNwb25kLmpzLzEuNC4yL3Jlc3BvbmQubWluLmpzIj48L3NjcmlwdD4NCiAgICA8IVtlbmRpZl0tLT4NCjwvaGVhZD4NCg0KDQoNCjxib2R5Pg0KICAgIDxkaXYgY2xhc3M9InB1c2htZW51IGNicC1zcG1lbnUtcHVzaCI+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICA8aGVhZGVyIGlkPSJIZWFkZXIiPg0KICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCIgcm9sZT0ibmF2aWdhdGlvbiIgaWQ9Ik5hdkJhciI+DQogICAgICAgICAgICAgICAgICAgIDwhLS0gQnJhbmQgYW5kIHRvZ2dsZSBnZXQgZ3JvdXBlZCBmb3IgYmV0dGVyIG1vYmlsZSBkaXNwbGF5IC0tPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InV0aWxzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3LmJ1bmRhYmVyZy5xbGQuZ292LmF1IiB0YXJnZXQ9Il9ibGFuayI+SG9tZTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuYnVuZGFiZXJnLnFsZC5nb3YuYXUvY291bmNpbC9jdXN0b21lci1zZXJ2aWNlIiB0YXJnZXQ9Il9ibGFuayI+Q29udGFjdCBVczwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuYnVuZGFiZXJnLnFsZC5nb3YuYXUvcHJpdmFjeSIgdGFyZ2V0PSJfYmxhbmsiPlByaXZhY3kgUG9saWN5PC9hPjwvbGk+DQo8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8aDEgaWQ9ImxvZ28iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmJ1bmRhYmVyZy5xbGQuZ292LmF1Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9Db3VuY2lsX1RoZW1lL0J1bmRhYmVyZy9icmMtbG9nby5wbmciIGFsdD0iQnVuZGFiZXJnIFJlZ2lvbmFsIENvdW5jaWwiPjxzdHJvbmcgY2xhc3M9InZoIj5CdW5kYWJlcmcgUmVnaW9uYWwgQ291bmNpbDwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDE+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvbmF2Pg0KDQoNCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJiYW5uZXIiPg0KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL0NvdW5jaWxfVGhlbWUvQnVuZGFiZXJnL2Jhbm5lci5qcGciPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8L2hlYWRlcj4NCg0KICAgICAgICAgICAgPGRpdiBpZD0iY29udGVudCI+DQogICAgICAgICAgICAgICAgPCEtLSBOYXZpZ2F0aW9uIC0tPg0KICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCBuYXZiYXItc3RhdGljLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDAiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0ibmF2YmFyLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iLm5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBuYXZpZ2F0aW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2YmFyLWJyYW5kIiBocmVmPSIvSG9tZS9JbmRleCI+PC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdmJhci1oZWFkZXIgLS0+DQogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdmJhci10b3AtbGlua3MgbmF2YmFyLXJpZ2h0IGhpZGRlbi14cyBoaWRkZW4tc20gaGlkZGVuLW1kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48c3BhbiBpZD0icHJpbnRJY29uIiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1wcmludCIgb25jbGljaz0id2luZG93LnByaW50KCk7Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgPC91bD4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItZGVmYXVsdCBzaWRlYmFyIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNpZGViYXItbmF2IG5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYiIGlkPSJzaWRlLW1lbnUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbiBUcmFja2VyPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvQWJvdXQgdGFyZ2V0PV9zZWxmPldoYXQgaXMgQXBwbGljYXRpb24gVHJhY2tlcj88L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvRGlzY2xhaW1lciB0YXJnZXQ9X3NlbGY+RGlzY2xhaW1lcjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnM8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9JbmRleCB0YXJnZXQ9PkFwcGxpY2F0aW9uIFRyYWNrZXIgSG9tZTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9TZWFyY2ggaWQ9c2VhcmNoIHRhcmdldD1fc2VsZj5TZWFyY2g8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P1JlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9VHJ1ZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgaWQ9b3V0c3RhbmRpbmctYXBwcyB0YXJnZXQ9X3NlbGY+VW5kZXRlcm1pbmVkIEFwcGxpY2F0aW9uczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/UmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPVRydWUmSW5jbHVkZURvY3VtZW50cz1GYWxzZSBpZD1leGhpYml0ZWQtYXBwcyB0YXJnZXQ9X3NlbGY+QXBwbGljYXRpb25zIE9uIEV4aGliaXRpb248L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zIFN1Ym1pdHRlZDxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0yMCUyZjA3JTJmMjAyMCZEYXRlVG89MjElMmYwNyUyZjIwMjAmRGF0ZVR5cGU9MSZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTEyJTJmMDclMmYyMDIwJkRhdGVUbz0xOCUyZjA3JTJmMjAyMCZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MSUyZjA3JTJmMjAyMCZEYXRlVG89MjElMmYwNyUyZjIwMjAmRGF0ZVR5cGU9MSZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDYlMmYyMDIwJkRhdGVUbz0zMCUyZjA2JTJmMjAyMCZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zIERldGVybWluZWQ8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MjAlMmYwNyUyZjIwMjAmRGF0ZVRvPTIxJTJmMDclMmYyMDIwJkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTEyJTJmMDclMmYyMDIwJkRhdGVUbz0xOCUyZjA3JTJmMjAyMCZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDclMmYyMDIwJkRhdGVUbz0yMSUyZjA3JTJmMjAyMCZEYXRlVHlwZT0yJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1UcnVlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+VGhpcyBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MSUyZjA2JTJmMjAyMCZEYXRlVG89MzAlMmYwNiUyZjIwMjAmRGF0ZVR5cGU9MiZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9VHJ1ZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5zaWRlYmFyLWNvbGxhcHNlIC0tPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdmJhci1zdGF0aWMtc2lkZSAtLT4NCiAgICAgICAgICAgICAgICA8L25hdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJwYWdlLXdyYXBwZXIiPg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIA0KDQoNCiAgICA8ZGl2IGNsYXNzPSJwYWdlLWhlYWRlciI+DQogICAgICAgIDxoMj5BcHBsaWNhdGlvbjogQ29uY3VycmVuY2UgQWdlbmN5IEFzc2Vzc21lbnQgKDUzMi4yMDE5LjU2OS4xKTwvaDI+DQogICAgPC9kaXY+DQogICAgPGg0PkRldGFpbGVkIGluZm9ybWF0aW9uIHJlbGF0ZWQgdG8gdGhlIGFwcGxpY2F0aW9uOjwvaDQ+DQogICAgPGJyIC8+DQogICAgPGRpdj4NCiAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDpzaG93QWxsKCk7Ij5TaG93IEFsbDwvYT4gLw0KICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OmhpZGVBbGwoKTsiPkhpZGUgQWxsPC9hPg0KICAgIDwvZGl2Pg0KICAgIDxkaXYgaWQ9ImFwcGxpY2F0aW9uIj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJkZXRhaWxzIj48YSBocmVmPSIjIj5EZXRhaWxzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZXNjcmlwdGlvbjogPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9ImRlc2NyaXB0aW9uIj5BbWVuaXR5ICZhbXA7IEFlc3RoZXRpY3MgLSBTaGVkPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlN1Ym1pdHRlZCBEYXRlOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE3LzA0LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFR5cGU6IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkNvbmN1cnJlbmNlIEFnZW5jeSBBc3Nlc3NtZW50PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InByb3BlcnRpZXMiPjxhIGhyZWY9IiMiPlByb3BlcnRpZXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJwcm9wZXJ0eS1saXN0Ij42NSBQYXJrIEVzdGF0ZSBEciwgQnJhbnlhbiA0NjcwIFFMRCAgKExvdDogMTggUlA6IDIyOTAyMyk8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0icGVvcGxlIj48YSBocmVmPSIjIj5QZW9wbGU8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPd25lcjogS2VubmV0aCBGcmFueg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE93bmVyOiBOZWl0dGEgR29zcGVyDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwbGljYW50OiBLZW5uZXRoIEZyYW56DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwbGljYW50OiBOZWl0dGEgR29zcGVyDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJvZmZpY2VyIj48YSBocmVmPSIjIj5PZmZpY2VyPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0ib2ZmaWNlck5hbWUiPkdyYW50IEJhcnJpbmdlcjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJkZWNpc2lvbiI+PGEgaHJlZj0iIyI+RGVjaXNpb248L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFN0YXR1czogRGV0ZXJtaW5lZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGV0ZXJtaW5hdGlvbiBEYXRlOg0KMTQvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZXRlcm1pbmF0aW9uIFR5cGU6IEFwcHJvdmVkPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCiAgICAgICAgICAgIDxoMyBpZD0idHJhY2tpbmciPjxhIGhyZWY9IiMiPlRyYWNraW5nPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uLXdyYXAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+c3dpcGUgdGFibGUgdG8gdGhlIGxlZnQgdG8gcmV2ZWFsIG1vcmUgZGF0YTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLWFycm93LXJpZ2h0IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkIG5vLWZvb3RlciI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RGVzY3JpcHRpb248L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+Q29tbWVuY2VkIERhdGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+Q29tcGxldGVkIERhdGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+TG9kZ2VtZW50PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE3LzA0LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxNy8wNC8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkNvbmZpcm1hdGlvbiBOb3RpY2U8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMTgvMDQvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjI5LzA0LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGVjaXNpb24gQ29uY3VycmVuY2UgQWdlbmN5PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjMwLzA0LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxNC8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KDQoNCg0KDQogICAgICAgICAgICA8aDMgaWQ9InJlbGF0ZWRBcHBsaWNhdGlvbnMiPjxhIGhyZWY9IiMiPlJlbGF0ZWQgQXBwbGljYXRpb25zPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8Yj5ObyBkYXRhLjwvYj4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCg0KDQoNCg0KDQo8aDMgaWQ9ImRvY3VtZW50cyI+PGEgaHJlZj0iIyI+RG9jdW1lbnRzPC9hPjwvaDM+DQo8ZGl2Pg0KDQogICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGlkPSJkb2MtY291bnQiPlRvdGFsIG51bWJlciBvZiBkb2N1bWVudHM6IDM8L2Rpdj4NCiAgICAgICAgPHRhYmxlIGlkPSJkb2MtdGFibGUiIGNsYXNzPSJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkIG5vLWZvb3RlciI+DQogICAgICAgICAgICA8dGhlYWQ+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGg+UmVjb3JkIE51bWJlcjwvdGg+DQogICAgICAgICAgICAgICAgICAgIDx0aD5EZXNjcmlwdGlvbjwvdGg+DQogICAgICAgICAgICAgICAgICAgIDx0aD5Eb2N1bWVudCBUeXBlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgPHRoIHN0eWxlPSJkaXNwbGF5Om5vbmUiPlNpemU8L3RoPg0KICAgICAgICAgICAgICAgICAgICA8dGg+VmlldyBMaW5rPC90aD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjEgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD41NjkgLSBQcm9wb3NhbCAtIEZyYW56ICZhbXA7IEdvc3BlciAtIDY1IFBhcmsgRXN0YXRlIERyIC0gMTcwNDIwMTkucGRmPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgUERGDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT0iZGlzcGxheTpub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjAwIE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYS5idW5kYWJlcmcucWxkLmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9d3FVTWQreTFGenZ6eUJtdkJZRXc5Zi8yR0c4RkF6RXFVWlZBbkFXNTZNUnRsRTJocFU0RmVLQlVydXRDZzhqMi9nNTBTYXJNc1dka3cwOW1MVTRZV0VJVm5zTldtaVVVQ0h5SDJGMnJCV0k9JmFtcDtmaWxlTmFtZT01NjkrLStQcm9wb3NhbCstK0ZyYW56KyUyNitHb3NwZXIrLSs2NStQYXJrK0VzdGF0ZStEcistKzE3MDQyMDE5LnBkZi5wZGYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjIgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD41NjkgLSBTaWduZWQgUmVmZXJyYWwgUmVzcG9uc2UgUGFja2FnZS0gSyBGcmFueiBhbmQgTiBHb3NwZXIgLSA2NSBQYXJrIEVzdGF0ZSBEciBCcmFueWFuIC0gMTQwNTIwMTkucGRmPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgUERGDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT0iZGlzcGxheTpub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjAwIE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYS5idW5kYWJlcmcucWxkLmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9OWhVbDRweDJEek8rK2lEdkRNaTREUGxTczJTcmxLb3pSQlJlT3RDSS9wd0Nwc1VMM1hFaTA2VWtieXc0M2RXZWNFVVNpbCtBTUk1NG5aanVmNWU1VTZLSllRT3dzUm5tNVBRbFRHYUVROHVHeFprY2JJcHlNdmVOZDdBdHRQeXR3QlYybXArMXA4UjlianNzdzhYTzlVeUhVdmZ0T1FHciZhbXA7ZmlsZU5hbWU9NTY5Ky0rU2lnbmVkK1JlZmVycmFsK1Jlc3BvbnNlK1BhY2thZ2UtK0srRnJhbnorYW5kK04rR29zcGVyKy0rNjUrUGFyaytFc3RhdGUrRHIrQnJhbnlhbistKzE0MDUyMDE5LnBkZi5wZGYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjMgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD41NjkgLSBDZXJ0aWZpZXIgQ29uZmlybWF0aW9uIE5vdGljZSAtIEFBQSBDZXJ0aWZpY2F0aW9uIC0gNjUgUGFyayBFc3RhdGUgRHIgQnJhbnlhbiAtIDIzMDQyMDE5LnBkZjwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIFBERg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQgc3R5bGU9ImRpc3BsYXk6bm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMC4wMCBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGEuYnVuZGFiZXJnLnFsZC5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PVJ3T1QwMzlyRklBWmVtb1JoR2Y3ODAvblhJNkpuMmVRa3d5anA1aDdjRGdmZ1M0K2o4L0QvZzIraDJUb29FS3h2bXlTOHVTUnJVQXpIU0Mrb0ZPaFlxQlVydXRDZzhqMi9nNTBTYXJNc1djZ1c2cEZmZ3E3bm5ZZDFHaUI1Nzl2ckp6bVRWWmNyejBJZklmWVhhc0ZZZz09JmFtcDtmaWxlTmFtZT01NjkrLStDZXJ0aWZpZXIrQ29uZmlybWF0aW9uK05vdGljZSstK0FBQStDZXJ0aWZpY2F0aW9uKy0rNjUrUGFyaytFc3RhdGUrRHIrQnJhbnlhbistKzIzMDQyMDE5LnBkZi5wZGYiIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCg0KICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgPC90YWJsZT4NCjwvZGl2Pg0KDQoNCiAgICAgICAgICAgIDxoMyBpZD0iY29udGFjdFVzIj48YSBocmVmPSIjIj5Db250YWN0IFVzPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5TaG91bGQgeW91IHdpc2ggdG8gY29udGFjdCBjb3VuY2lsIHRvIG1ha2UgZW5xdWlyaWVzIHJlZ2FyZGluZyBhcHBsaWNhdGlvbnMgZGlzcGxheWVkIG9uIHRoZSB3ZWJzaXRlLCBwbGVhc2UgY29udGFjdCBjb3VuY2lsIGVpdGhlciBieSBlbWFpbCA8YSBocmVmPSJtYWlsdG86Q0VPQGJ1bmRhYmVyZy5xbGQuZ292LmF1P3N1YmplY3Q9U3VibWlzc2lvbiBmb3IgYXBwbGljYXRpb24gKDUzMi4yMDE5LjU2OS4xKSI+Q0VPQGJ1bmRhYmVyZy5xbGQuZ292LmF1PC9hPiwgcGhvbmUgMTMwMCA4ODMgNjk5IGR1cmluZyBub3JtYWwgb2ZmaWNlIGhvdXJzIG9yIGluIHdyaXRpbmcgdG8gUE8gQm94IDMxMzAsQlVOREFCRVJHIFFMRCA0NjcwDQogICAgICAgIC4gQWxsIGNvcnJlc3BvbmRlbmNlIHNob3VsZCBiZSBhZGRyZXNzZWQgdG8gdGhlIEdlbmVyYWwgTWFuYWdlciBhbmQgcXVvdGUgdGhlIHJlbGV2YW50IGFwcGxpY2F0aW9uIHJlZmVyZW5jZSBudW1iZXIuDQo8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KPGgzIGlkPSJnb29nbGVtYXBzIj48YSBocmVmPSIjIj5Hb29nbGUgTWFwczwvYT48L2gzPg0KPGRpdiBpZD0ibWFwX2NvbnRhaW5lciI+DQogICAgPGRpdiBpZD0ibWFwX2NhbnZhcyIgY2xhc3M9ImlmcmFtZS1yd2QiPg0KICAgIDwvZGl2Pg0KPC9kaXY+DQoNCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCg0KICAgIHdpbmRvdy5vbmxvYWQgPSBsb2FkR29vZ2xlTWFwc1NjcmlwdDsNCg0KICAgIHZhciBnZW9jb2RlcjsNCiAgICB2YXIgbWFwOw0KICAgIHZhciB0aW1lb3V0ID0gMzAwOw0KICAgIHZhciBwcm9wZXJ0aWVzID0gWyI2NSBQYXJrIEVzdGF0ZSBEciwgQnJhbnlhbiA0NjcwIFFMRCAiXTsNCiAgICB2YXIgbGF0TG5nQXJyID0gW107DQoNCiAgICBmdW5jdGlvbiBsb2FkR29vZ2xlTWFwc1NjcmlwdCgpIHsNCiAgICAgICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpOw0KICAgICAgICBzY3JpcHQudHlwZSA9ICJ0ZXh0L2phdmFzY3JpcHQiOw0KICAgICAgICBzY3JpcHQuc3JjID0gIi8vbWFwcy5nb29nbGVhcGlzLmNvbS9tYXBzL2FwaS9qcz9rZXk9QUl6YVN5QTVIWWdhWEJjbWFRZTIwSFd2dnFkV2drZFA5Ry1yZkhjJmNhbGxiYWNrPWxvYWRHb29nbGVNYXBzIjsNCiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHJlbmRlckdvb2dsZU1hcHMoKQ0KICAgIHsNCiAgICAgICAgdmFyIG1hcE9wdGlvbnMgPSB7DQogICAgICAgICAgICBjZW50ZXI6IGxhdExuZ0FyclswXSwNCiAgICAgICAgICAgIHpvb206IDE2LA0KICAgICAgICAgICAgbWFwVHlwZUlkOiBnb29nbGUubWFwcy5NYXBUeXBlSWQuUk9BRE1BUCwNCiAgICAgICAgICAgIG1hcFR5cGVDb250cm9sOiBmYWxzZQ0KICAgICAgICB9DQoNCiAgICAgICAgbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibWFwX2NhbnZhcyIpLCBtYXBPcHRpb25zKTsNCg0KICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGREb21MaXN0ZW5lcih3aW5kb3csICdyZXNpemUnLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIHZhciBjZW50ZXIgPSBtYXAuZ2V0Q2VudGVyKCk7DQogICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC50cmlnZ2VyKG1hcCwgJ3Jlc2l6ZScpOw0KICAgICAgICAgICAgbWFwLnNldENlbnRlcihjZW50ZXIpOw0KICAgICAgICB9KTsNCg0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGxvYWRHb29nbGVNYXBzKCkgew0KICAgICAgICBnZW9jb2RlciA9IG5ldyBnb29nbGUubWFwcy5HZW9jb2RlcigpOw0KICAgICAgICB2YXIgbm9PZkZhaWxlZExvY2F0aW9uU2VhcmNoID0gMDsNCg0KICAgICAgICAkKHByb3BlcnRpZXMpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7DQogICAgICAgICAgICB2YXIgcHJvcGVydHlBZGRyZXNzID0gZWxlbWVudDsNCg0KICAgICAgICAgICAgLy9HZXQgZ2VvY29kZQ0KICAgICAgICAgICAgZ2VvY29kZXIuZ2VvY29kZSh7ICdhZGRyZXNzJzogcHJvcGVydHlBZGRyZXNzIH0sIGZ1bmN0aW9uIChyZXN1bHRzLCBzdGF0dXMpIHsNCiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09IGdvb2dsZS5tYXBzLkdlb2NvZGVyU3RhdHVzLk9LKSB7DQoNCiAgICAgICAgICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gcmVzdWx0c1swXS5nZW9tZXRyeS5sb2NhdGlvbjsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGxhdExuZyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcobG9jYXRpb24ubGF0KCksIGxvY2F0aW9uLmxuZygpKTsNCg0KICAgICAgICAgICAgICAgICAgICBsYXRMbmdBcnIucHVzaChsYXRMbmcpOw0KDQogICAgICAgICAgICAgICAgICAgIGlmKGxhdExuZ0Fyci5sZW5ndGggPT0gMSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyR29vZ2xlTWFwcygpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgLy9DcmVhdGUgbWFya2VyIGZvciBtYXAgYW5kIHBsYWNlIGl0IG9uIHRoZSBtYXANCiAgICAgICAgICAgICAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoew0KICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGxhdExuZywNCiAgICAgICAgICAgICAgICAgICAgICAgIG1hcDogbWFwDQogICAgICAgICAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50U3RyaW5nID0gJzxkaXY+PHNwYW4+JyArIHByb3BlcnR5QWRkcmVzcyArICc8L3NwYW4+PC9kaXY+JzsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGluZm93aW5kb3cgPSBuZXcgZ29vZ2xlLm1hcHMuSW5mb1dpbmRvdyh7ICAgLy9DcmVhdGUgaW5mbyB3aW5kb3cNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnRTdHJpbmcNCiAgICAgICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFya2VyLCAnY2xpY2snLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGluZm93aW5kb3cub3BlbihtYXAsIG1hcmtlcik7DQogICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAvL2lmIG5vIGxvY2F0aW9uIGZvdW5kIGJ5IGdvb2dsZSBmb3IgYSBwcm9wZXJ0eQ0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKHN0YXR1cyA9PSAiWkVST19SRVNVTFRTIikgew0KICAgICAgICAgICAgICAgICAgICBub09mRmFpbGVkTG9jYXRpb25TZWFyY2grKzsNCg0KICAgICAgICAgICAgICAgICAgICBpZihub09mRmFpbGVkTG9jYXRpb25TZWFyY2ggPT0gJChwcm9wZXJ0aWVzKS5sZW5ndGgpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VHb29nbGVNYXBzQ29udGVudCgpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PSBnb29nbGUubWFwcy5HZW9jb2RlclN0YXR1cy5PVkVSX1FVRVJZX0xJTUlUKSB7DQogICAgICAgICAgICAgICAgICAgIC8vc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IGdldEdlb0NvZGVGb3JBZGRyZXNzKGlkLCBhZGRyZXNzKTsgfSwgKHRpbWVvdXQpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfSk7DQogICAgfQ0KDQogICAgLy9SZXBsYWNlcyBnb29nbGUgbWFwcyBjb250ZW50IHdpdGggYSBuZXcgZGl2IGJsb2NrIHRoYXQgaGFzIGluZm8gbWVzc2FnZQ0KICAgIGZ1bmN0aW9uIHJlcGxhY2VHb29nbGVNYXBzQ29udGVudCgpIHsNCiAgICAgICAgdmFyIG5ld0NvbnRlbnQgPSAnPGRpdiBjbGFzcz0idWktYWNjb3JkaW9uLWNvbnRlbnQgdWktaGVscGVyLXJlc2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1ib3R0b20iPicgKw0KICAgICAgICAgICAgJzxwPkNvdWxkblwndCBmaW5kIHRoZSBwcm9wZXJ0eSBhZGRyZXNzKGVzKSBvbiBHb29nbGUgTWFwcy4gPHA+JyArDQogICAgICAgICAgICAnPC9kaXY+JzsNCg0KICAgICAgICAkKCcjbWFwX2NvbnRhaW5lcicpLnJlcGxhY2VXaXRoKG5ld0NvbnRlbnQpOw0KICAgIH0NCg0KPC9zY3JpcHQ+DQoNCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIiBpZD0ic3VibWlzc2lvbi1tb2RhbCI+DQogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcGlubmVyIj48L2Rpdj4gPCEtLSBUaGlzIGRpdiBob3N0cyB0aGUgc3Bpbm5lciAtLT4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2xvc2UiIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGFyaWEtbGFiZWw9IkNsb3NlIj48c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSI+JnRpbWVzOzwvc3Bhbj48L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJtb2RhbC10aXRsZSI+U3VibWlzc2lvbiBmb3IgNTMyLjIwMTkuNTY5LjE8L2gyPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCg0KICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHsNCg0KICAgICAgICAkKCcjYXBwbGljYXRpb24nKS50b2dnbGVwYW5lbHMoKTsNCg0KICAgICAgICAgICAgJCgnI3Byb3BlcnRpZXMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2RldGFpbHMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI3RyYWNraW5nJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNkb2N1bWVudHMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI3JlbGF0ZWRBcHBsaWNhdGlvbnMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2dvb2dsZW1hcHMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2NvbnRhY3RVcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZXhoaWJpdGlvbkRldGFpbHMnKS5jbGljaygpOw0KDQogICAgICAgIA0KDQoNCiAgICAgICAgJCgnI3N1Ym1pc3Npb24tYnRuJykuY2xpY2soZnVuY3Rpb24gKCkgeyAgICAgICAgDQoNCg0KICAgICAgICAgICAgdmFyIHVybCA9ICJodHRwczovL2RhLmJ1bmRhYmVyZy5xbGQuZ292LmF1Ly9BcHBsaWNhdGlvbi9TdWJtaXNzaW9uLyIgKyBlbmNvZGVVUkkoIjUzMi4yMDE5LjU2OS4xIik7DQoNCiAgICAgICAgICAgICQoJyNzdWJtaXNzaW9uLW1vZGFsJykubW9kYWwoJ3Nob3cnKS5maW5kKCcubW9kYWwtYm9keScpLmxvYWQodXJsKTsNCiAgICAgICAgfSk7DQogICAgfSk7DQoNCg0KICAgIC8qIFNob3dzIGFsbCB0aGUgcGFuZWxzICovDQogICAgZnVuY3Rpb24gc2hvd0FsbCgpIHsNCiAgICAgICAgJCgnI2FwcGxpY2F0aW9uJykuY2hpbGRyZW4oImgzIikuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygidWktc3RhdGUtZGVmYXVsdCIpKSB7DQogICAgICAgICAgICAgICAgJCh0aGlzKS5jbGljaygpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICB9DQoNCg0KICAgIC8qIEhpZGUgYWxsIHRoZSBwYW5lbHMgKi8NCiAgICBmdW5jdGlvbiBoaWRlQWxsKCkgew0KICAgICAgICAkKCcjYXBwbGljYXRpb24nKS5jaGlsZHJlbigiaDMiKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCJ1aS1zdGF0ZS1hY3RpdmUiKSkgew0KICAgICAgICAgICAgICAgICQodGhpcykuY2xpY2soKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgfQ0KDQogICAgPC9zY3JpcHQ+DQoNCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwhLS0gLy5jb250YWluZXItZmx1aWQgLS0+DQoNCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIC8jcGFnZS13cmFwcGVyIC0tPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KICAgICAgICAgICAgPGRpdiBpZD0iR3JlZW5CYXIiPg0KICAgICAgICAgICAgICAgIDxhPkNvcHlyaWdodCDCqSAyMDE3IEJ1bmRhYmVyZyBSZWdpb25hbCBDb3VuY2lsLiBBbGwgcmlnaHRzIHJlc2VydmVkPC9hPg0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KDQogICAgPGRpdiBpZD0idGlwdGlwX2hvbGRlciIgc3R5bGU9Im1heC13aWR0aDozMDBweDsiPjxkaXYgaWQ9InRpcHRpcF9hcnJvdyI+PGRpdiBpZD0idGlwdGlwX2Fycm93X2lubmVyIj48L2Rpdj48L2Rpdj48ZGl2IGlkPSJ0aXB0aXBfY29udGVudCI+PC9kaXY+PC9kaXY+DQo8L2JvZHk+DQoNCjwvaHRtbD4NCg==
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/522.2019.00000143.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '33735'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:19:04 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 0fdd8a19a9733146290bbb49eeceb280.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - "-0irM4l7szapxChMBLAKkTL3spc-P78ljuXgnsPBG-atVu6O0Ydj-Q=="
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/532.2019.00000575.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '27096'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:19:06 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 41f4e34e5d78c923aead0fa16ff91eb9.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - 4PXtWjjOOBHrnnYyUPbwsTNjcoaZr_KnGlPkE66YzVVFSxUhAII-PA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/532.2019.00000567.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '29807'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:19:07 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 88f40be442aecae39e92819a37969961.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - NSwfsgv2QE782UAsJGGKYdhfvZXgpGfjbieMdE_grLSlpisbPkjFxQ==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/532.2019.00000570.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '27152'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:19:09 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 38264aca9bab114a0bd19db8ab8521dd.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - SZWiM01oQsKnVgUUnVZg4MeCYr9iyMno4DqY1-8ByIuoIh2oniy8Qw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/526.2019.00000121.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '27080'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:19:11 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 ee71cd8922eab5657dc27cac15f87d5a.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - 04Kvm4hljcnoYOI31gpaSPLOim5WkBsreZWWfTCMK0yOuGryMiGkVg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/532.2019.00000568.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '27644'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:19:13 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 3fc090af5e840c09e1796cd1af76a002.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - HdIHIpM6JHJBF6h8a1fv-6jl9xMVVyFa8SQ9HZnTMHfBM-gfmsYHPA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://da.bundaberg.qld.gov.au/Application/ApplicationDetails/526.2019.00000118.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=vgf5ori5jtqjcpyzhbvibera; User=accessAllowed-MasterView=True
      Host:
      - da.bundaberg.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '27337'
      Connection:
      - keep-alive
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 21 Jul 2020 01:19:15 GMT
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 31efcfadb9bf42888048a4e21662d761.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - SYD1-C2
      X-Amz-Cf-Id:
      - GRGyu8BdaNXUlZ590L4hesYnpxVzmXm-DZMY3-D62to75lvPzBbcgQ==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
recorded_with: VCR 5.0.0
