---
http_interactions:
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/Home/Disclaimer"
      Server:
      - Microsoft-IIS/8.5
      Set-Cookie:
      - ASP.NET_SessionId=rnx1snuirhljysqpyav0xgks; path=/; HttpOnly
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 17 Sep 2019 02:22:22 GMT
      Content-Length:
      - '133'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/Home/Disclaimer\">here</a>.</h2>\r\n</body></html>\r\n"
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Home/Disclaimer
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=rnx1snuirhljysqpyav0xgks
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 17 Sep 2019 02:22:22 GMT
      Content-Length:
      - '15654'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: post
    uri: https://daonline.gympie.qld.gov.au/Home/DisclaimerProcessing
    body:
      encoding: UTF-8
      string: agreed=true
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=rnx1snuirhljysqpyav0xgks
      Host:
      - daonline.gympie.qld.gov.au
      Referer:
      - https://daonline.gympie.qld.gov.au/Home/Disclaimer
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '11'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Location:
      - "/"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      Set-Cookie:
      - User=accessAllowed-MasterView=True; path=/
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 17 Sep 2019 02:22:22 GMT
      Content-Length:
      - '118'
    body:
      encoding: UTF-8
      string: "<html><head><title>Object moved</title></head><body>\r\n<h2>Object
        moved to <a href=\"/\">here</a>.</h2>\r\n</body></html>\r\n"
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=rnx1snuirhljysqpyav0xgks; User=accessAllowed-MasterView=True
      Host:
      - daonline.gympie.qld.gov.au
      Referer:
      - https://daonline.gympie.qld.gov.au/Home/Disclaimer
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 17 Sep 2019 02:22:22 GMT
      Content-Length:
      - '22593'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: post
    uri: https://daonline.gympie.qld.gov.au/Application/GetApplications
    body:
      encoding: UTF-8
      string: start=0&length=100&json=%7B%22DateFrom%22%3A%2214%2F04%2F2019%22%2C%22DateTo%22%3A%2214%2F05%2F2019%22%2C%22DateType%22%3A%221%22%2C%22RemoveUndeterminedApplications%22%3Afalse%2C%22ShowOutstandingApplications%22%3Afalse%2C%22ShowExhibitedApplications%22%3Afalse%2C%22IncludeDocuments%22%3Afalse%7D
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=rnx1snuirhljysqpyav0xgks; User=accessAllowed-MasterView=True
      Host:
      - daonline.gympie.qld.gov.au
      Referer:
      - https://daonline.gympie.qld.gov.au/
      Content-Type:
      - application/x-www-form-urlencoded
      Content-Length:
      - '298'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - application/json; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 17 Sep 2019 02:22:24 GMT
      Content-Length:
      - '2876'
    body:
      encoding: UTF-8
      string: '{"draw":null,"recordsTotal":13,"recordsFiltered":13,"data":[["008.2019.00001839.001","8.2019.1839.1","Reconfiguring
        a Lot","01/05/2019","168 Fritz Rd, Chatsworth 4570 QLD \u003cbr/\u003e\u003cb\u003eSubdivision
        to Create One (1) Additional Lot\u003c/b\u003e"],["008.2019.00001837.001","8.2019.1837.1","Reconfiguring
        a Lot","02/05/2019","6 Kath Rd, Araluen 4570 QLD \u003cbr/\u003eSunny View
        Ct, Araluen 4570 QLD \u003cbr/\u003e\u003cb\u003eBoundary Realignment\u003c/b\u003e"],["007.2019.00001854.001","7.2019.1854.1","Material
        Change of Use","03/05/2019","Dombrow Rd, Mudlo 4600 QLD \u003cbr/\u003e\u003cb\u003eDwelling
        House\u003c/b\u003e"],["007.2019.00001895.001","7.2019.1895.1","Material Change
        of Use","03/05/2019","14-18 Channon St, Gympie 4570 QLD \u003cbr/\u003e36
        Reef St, Gympie 4570 QLD \u003cbr/\u003e\u003cb\u003eIndoor Sport and Recreation
        (Pilates Studio)\u003c/b\u003e"],["008.2019.00001959.001","8.2019.1959.1","Reconfiguring
        a Lot","14/05/2019","Furness Rd, Southside 4570 QLD \u003cbr/\u003e\u003cb\u003eSubdivision
        to Create 49 Additional Lots\u003c/b\u003e"],["008.2019.00001852.001","8.2019.1852.1","Reconfiguring
        a Lot","01/05/2019","96 Kurrajong Dve, The Palms 4570 QLD \u003cbr/\u003e\u003cb\u003eSubdivision
        to Create One (1) Additional Lot and Access Easement\u003c/b\u003e"],["008.2019.00001853.001","8.2019.1853.1","Reconfiguring
        a Lot","01/05/2019","1-3 Davey Rd, Southside 4570 QLD \u003cbr/\u003e\u003cb\u003eSubdivision
        to Create One (1) Additional Lot\u003c/b\u003e"],["007.2019.00001896.001","7.2019.1896.1","Material
        Change of Use","08/05/2019","48 Reef St, Gympie 4570 QLD \u003cbr/\u003e\u003cb\u003eOffice\u003c/b\u003e"],["007.2019.00001840.001","7.2019.1840.1","Material
        Change of Use","03/05/2019","29 Glen Eden Dve, Gympie 4570 QLD \u003cbr/\u003e\u003cb\u003eDual
        Occupancy\u003c/b\u003e"],["008.2019.00001874.001","8.2019.1874.1","Reconfiguring
        a Lot","08/05/2019","10 Baroona Ct, Tamaree 4570 QLD \u003cbr/\u003e\u003cb\u003eSubdivision
        to Create Three (3) Additional Lots\u003c/b\u003e"],["007.2019.00001677.001","7.2019.1677.1","Material
        Change of Use","28/04/2019","2 Laurenceson Rd, Glanmire 4570 QLD \u003cbr/\u003e\u003cb\u003eShowroom
        (Motor Vehicle Sales Showroom), Outdoor Sales (Motor Vehicle Sales Yard) and
        Low Impact Industry (Motor Vehicle Workshop)\u003c/b\u003e"],["007.2019.00001835.001","7.2019.1835.1","Material
        Change of Use","30/04/2019","1-11 Pinewood Av, Gympie 4570 QLD \u003cbr/\u003e7/17
        Pinewood Av, Gympie 4570 QLD \u003cbr/\u003e\u003cb\u003eIndoor Sport and
        Recreation (Roller Skating Facility)\u003c/b\u003e"],["008.2019.00001671.001","8.2019.1671.1","Reconfiguring
        a Lot","16/04/2019","33 Cullinane Rd, Mothar Mountain 4570 QLD \u003cbr/\u003e93
        Cullinane Rd, Mothar Mountain 4570 QLD \u003cbr/\u003e\u003cb\u003eSubdivision
        to Create Two (2) New Lots from Two (2) Existing Lots\u003c/b\u003e"]]}'
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Application/ApplicationDetails/008.2019.00001839.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=rnx1snuirhljysqpyav0xgks; User=accessAllowed-MasterView=True
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 17 Sep 2019 02:22:24 GMT
      Content-Length:
      - '27726'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Application/ApplicationDetails/008.2019.00001837.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=rnx1snuirhljysqpyav0xgks; User=accessAllowed-MasterView=True
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 17 Sep 2019 02:22:25 GMT
      Content-Length:
      - '27901'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Application/ApplicationDetails/007.2019.00001854.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=rnx1snuirhljysqpyav0xgks; User=accessAllowed-MasterView=True
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 17 Sep 2019 02:22:25 GMT
      Content-Length:
      - '32914'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Application/ApplicationDetails/007.2019.00001895.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=rnx1snuirhljysqpyav0xgks; User=accessAllowed-MasterView=True
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 17 Sep 2019 02:22:27 GMT
      Content-Length:
      - '31712'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Application/ApplicationDetails/008.2019.00001959.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=rnx1snuirhljysqpyav0xgks; User=accessAllowed-MasterView=True
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 17 Sep 2019 02:22:27 GMT
      Content-Length:
      - '23654'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Application/ApplicationDetails/008.2019.00001852.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=rnx1snuirhljysqpyav0xgks; User=accessAllowed-MasterView=True
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 17 Sep 2019 02:22:28 GMT
      Content-Length:
      - '28481'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Application/ApplicationDetails/008.2019.00001853.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=rnx1snuirhljysqpyav0xgks; User=accessAllowed-MasterView=True
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 17 Sep 2019 02:22:28 GMT
      Content-Length:
      - '27941'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Application/ApplicationDetails/007.2019.00001896.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=rnx1snuirhljysqpyav0xgks; User=accessAllowed-MasterView=True
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 17 Sep 2019 02:22:30 GMT
      Content-Length:
      - '30127'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Application/ApplicationDetails/007.2019.00001840.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=rnx1snuirhljysqpyav0xgks; User=accessAllowed-MasterView=True
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 17 Sep 2019 02:22:30 GMT
      Content-Length:
      - '28387'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iR3ltcGllIFJlZ2lvbmFsIENvdW5jaWwsREEgVHJhY2tlcixEZXZlbG9wbWVudCBBcHBsaWNhdGlvbixEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBUcmFja2luZywgREEgRW5xdWlyeSwgRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gRW5xdWlyeSwgQXBwbGljYXRpb24gVHJhY2tlciI+DQogICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IlRoZSBvZmZpY2lhbCBHeW1waWUgUmVnaW9uYWwgQ291bmNpbCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCg0KICAgIDx0aXRsZT5HeW1waWUgUmVnaW9uYWwgQ291bmNpbCAtIEFwcGxpY2F0aW9uIFRyYWNrZXI8L3RpdGxlPg0KDQogICAgPCEtLWZhdmljb24tLT4NCiAgICA8bGluayBocmVmPSIvZmF2aWNvbi5pY28iIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIj4NCg0KICAgIDwhLS0galF1ZXJ5IC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9qcXVlcnktMS4xMS4xLmpzIj48L3NjcmlwdD4NCg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9qcXVlcnktdWktMS4xMS4yLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L3RoZW1lcy9iYXNlL2NvcmUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9Db250ZW50L3RoZW1lcy9iYXNlL2FjY29yZGlvbi5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvdGhlbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBCb290c3RyYXAgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2Jvb3RzdHJhcC5qcyI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9ib290c3RyYXAtdGhlbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvZm9udC1hd2Vzb21lLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gRGF0YVRhYmxlcyAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvRGF0YVRhYmxlcy9qcXVlcnkuZGF0YVRhYmxlcy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdHMvRGF0YVRhYmxlcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdHMvRGF0YVRhYmxlcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuanMiPjwvc2NyaXB0Pg0KDQogICAgDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5ib290c3RyYXAuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9Db250ZW50L0RhdGFUYWJsZXMvY3NzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLnNjc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCBTQi1BZG1pbi0yIFBsdWdpbiBhbmQgb3RoZXIgY3NzIGFuZCBqcyBmaWxlcy0tPg0KICAgIDxzY3JpcHQgc3JjPSIvanMvYm9vdHN0cmFwLWNvbWJvYm94LmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvYm9vdHN0cmFwLWRhdGVwaWNrZXIuanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtZGlhbG9nLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LmZvcm0uanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9qcXVlcnkudGFibGVzb3J0ZXIuanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9tYXN0ZXJ2aWV3LmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWV0aXNNZW51LmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvc2ItYWRtaW4tMi5qcyI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvY3NzL2Jvb3RzdHJhcC1jb21ib2JveC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9kYXRlcGlja2VyMy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9tYXN0ZXJ2aWV3LWN1c3RvbWlzYXRpb25zLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvY3NzL3NiLWFkbWluLTIuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPGxpbmsgaHJlZj0iL0NvdW5jaWxfVGhlbWUvZ3ltcGllL2d5bXBpZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgDQoNCiAgICA8IS0tIEhUTUw1IFNoaW0gYW5kIFJlc3BvbmQuanMgSUU4IHN1cHBvcnQgb2YgSFRNTDUgZWxlbWVudHMgYW5kIG1lZGlhIHF1ZXJpZXMgLS0+DQogICAgPCEtLSBXQVJOSU5HOiBSZXNwb25kLmpzIGRvZXNuJ3Qgd29yayBpZiB5b3UgdmlldyB0aGUgcGFnZSB2aWEgZmlsZTovLyAtLT4NCiAgICA8IS0tW2lmIGx0IElFIDldPg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL2h0bWw1c2hpdi8zLjcuMC9odG1sNXNoaXYuanMiPjwvc2NyaXB0Pg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL3Jlc3BvbmQuanMvMS40LjIvcmVzcG9uZC5taW4uanMiPjwvc2NyaXB0Pg0KICAgIDwhW2VuZGlmXS0tPg0KPC9oZWFkPg0KDQoNCg0KPGJvZHk+DQogICAgPGRpdiBjbGFzcz0icHVzaG1lbnUgY2JwLXNwbWVudS1wdXNoIj4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4NCiAgICAgICAgICAgIDxoZWFkZXIgaWQ9IkhlYWRlciI+DQogICAgICAgICAgICAgICAgPG5hdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1kZWZhdWx0IiByb2xlPSJuYXZpZ2F0aW9uIiBpZD0iTmF2QmFyIj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSBCcmFuZCBhbmQgdG9nZ2xlIGdldCBncm91cGVkIGZvciBiZXR0ZXIgbW9iaWxlIGRpc3BsYXkgLS0+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZnIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idXRpbHMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuZ3ltcGllLnFsZC5nb3YuYXUiPkhvbWU8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3Lmd5bXBpZS5xbGQuZ292LmF1L2NvbnRhY3QtdXMiPkNvbnRhY3QgVXM8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8aDEgaWQ9ImxvZ28iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmd5bXBpZS5xbGQuZ292LmF1Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9Db3VuY2lsX1RoZW1lL2d5bXBpZS9sb2dvLnBuZyIgYWx0PSJHeW1waWUgUmVnaW9uYWwgQ291bmNpbCI+PHN0cm9uZyBjbGFzcz0idmgiPkd5bXBpZSBSZWdpb25hbCBDb3VuY2lsPC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9oMT4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICA8L2hlYWRlcj4NCg0KICAgICAgICAgICAgPGRpdiBpZD0iY29udGVudCI+DQogICAgICAgICAgICAgICAgPCEtLSBOYXZpZ2F0aW9uIC0tPg0KICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCBuYXZiYXItc3RhdGljLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDAiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0ibmF2YmFyLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iLm5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBuYXZpZ2F0aW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2YmFyLWJyYW5kIiBocmVmPSIvSG9tZS9JbmRleCI+PC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdmJhci1oZWFkZXIgLS0+DQogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdmJhci10b3AtbGlua3MgbmF2YmFyLXJpZ2h0IGhpZGRlbi14cyBoaWRkZW4tc20gaGlkZGVuLW1kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48c3BhbiBpZD0icHJpbnRJY29uIiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1wcmludCIgb25jbGljaz0id2luZG93LnByaW50KCk7Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgPC91bD4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItZGVmYXVsdCBzaWRlYmFyIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNpZGViYXItbmF2IG5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYiIGlkPSJzaWRlLW1lbnUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbiBUcmFja2VyPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvQWJvdXQgdGFyZ2V0PV9zZWxmPldoYXQgaXMgQXBwbGljYXRpb24gVHJhY2tlcj88L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvRGlzY2xhaW1lciB0YXJnZXQ9X3NlbGY+RGlzY2xhaW1lcjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnM8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9JbmRleCB0YXJnZXQ9PkFwcGxpY2F0aW9uIFRyYWNrZXIgSG9tZTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9TZWFyY2ggaWQ9c2VhcmNoIHRhcmdldD1fc2VsZj5TZWFyY2g8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P1JlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9VHJ1ZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgaWQ9b3V0c3RhbmRpbmctYXBwcyB0YXJnZXQ9X3NlbGY+VW5kZXRlcm1pbmVkIEFwcGxpY2F0aW9uczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/UmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPVRydWUmSW5jbHVkZURvY3VtZW50cz1GYWxzZSBpZD1leGhpYml0ZWQtYXBwcyB0YXJnZXQ9X3NlbGY+QXBwbGljYXRpb25zIE9uIEV4aGliaXRpb248L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zIFN1Ym1pdHRlZDxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xNiUyZjA5JTJmMjAxOSZEYXRlVG89MTclMmYwOSUyZjIwMTkmRGF0ZVR5cGU9MSZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTglMmYwOSUyZjIwMTkmRGF0ZVRvPTE0JTJmMDklMmYyMDE5JkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDklMmYyMDE5JkRhdGVUbz0xNyUyZjA5JTJmMjAxOSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwOCUyZjIwMTkmRGF0ZVRvPTMxJTJmMDglMmYyMDE5JkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnMgRGV0ZXJtaW5lZDxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xNiUyZjA5JTJmMjAxOSZEYXRlVG89MTclMmYwOSUyZjIwMTkmRGF0ZVR5cGU9MiZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9VHJ1ZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209OCUyZjA5JTJmMjAxOSZEYXRlVG89MTQlMmYwOSUyZjIwMTkmRGF0ZVR5cGU9MiZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9VHJ1ZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MSUyZjA5JTJmMjAxOSZEYXRlVG89MTclMmYwOSUyZjIwMTkmRGF0ZVR5cGU9MiZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9VHJ1ZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwOCUyZjIwMTkmRGF0ZVRvPTMxJTJmMDglMmYyMDE5JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5MYXN0IE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5uYXYtc2Vjb25kLWxldmVsIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8uc2lkZWJhci1jb2xsYXBzZSAtLT4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwhLS0gLy5uYXZiYXItc3RhdGljLXNpZGUgLS0+DQogICAgICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICAgICAgPGRpdiBpZD0icGFnZS13cmFwcGVyIj4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXItZmx1aWQiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICANCg0KDQogICAgPGRpdiBjbGFzcz0icGFnZS1oZWFkZXIiPg0KICAgICAgICA8aDI+QXBwbGljYXRpb246IE1hdGVyaWFsIENoYW5nZSBvZiBVc2UgKDcuMjAxOS4xODQwLjEpPC9oMj4NCiAgICA8L2Rpdj4NCiAgICA8aDQ+RGV0YWlsZWQgaW5mb3JtYXRpb24gcmVsYXRlZCB0byB0aGUgYXBwbGljYXRpb246PC9oND4NCiAgICA8YnIgLz4NCiAgICA8ZGl2Pg0KICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnNob3dBbGwoKTsiPlNob3cgQWxsPC9hPiAvDQogICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6aGlkZUFsbCgpOyI+SGlkZSBBbGw8L2E+DQogICAgPC9kaXY+DQogICAgPGRpdiBpZD0iYXBwbGljYXRpb24iPg0KDQogICAgICAgICAgICA8aDMgaWQ9ImRldGFpbHMiPjxhIGhyZWY9IiMiPkRldGFpbHM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRlc2NyaXB0aW9uOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0iZGVzY3JpcHRpb24iPkR1YWwgT2NjdXBhbmN5PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlN1Ym1pdHRlZCBEYXRlOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjAzLzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFR5cGU6IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPk1hdGVyaWFsIENoYW5nZSBvZiBVc2U8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0icHJvcGVydGllcyI+PGEgaHJlZj0iIyI+UHJvcGVydGllczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9InByb3BlcnR5LWxpc3QiPjI5IEdsZW4gRWRlbiBEdmUsIEd5bXBpZSA0NTcwIFFMRCAgKExPVDogMTIwIFNQOiAxODYxNzYpPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8aDMgaWQ9InBlb3BsZSI+PGEgaHJlZj0iIyI+UGVvcGxlPC9hPjwvaDM+DQogICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgIDx0YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPHRib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwbGljYW50OiAgTGluZGVuYmVyZyBIb2xkaW5ncyBQdHkgTHRkIGFzIFRydXN0ZWUNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBc3Nlc3NtZW50IE1hbmFnZXI6ICBHeW1waWUgUmVnaW9uYWwgQ291bmNpbA0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0ib2ZmaWNlciI+PGEgaHJlZj0iIyI+T2ZmaWNlcjwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9Im9mZmljZXJOYW1lIj5Bc2hsZWlnaCBNY01pbGxhbjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJkZWNpc2lvbiI+PGEgaHJlZj0iIyI+RGVjaXNpb248L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFN0YXR1czogRGV0ZXJtaW5lZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGV0ZXJtaW5hdGlvbiBEYXRlOg0KMTAvMDcvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZXRlcm1pbmF0aW9uIFR5cGU6IEFwcHJvdmVkIGJ5IERlbGVnYXRpb248L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KICAgICAgICAgICAgPGgzIGlkPSJ0cmFja2luZyI+PGEgaHJlZj0iIyI+VHJhY2tpbmc8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EZXNjcmlwdGlvbjwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db21tZW5jZWQgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db21wbGV0ZWQgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Db25maXJtYXRpb24gUGVyaW9kPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjA3LzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyMi8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRlY2lzaW9uIEFzc2Vzc21lbnQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjIvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjEwLzA3LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+SXNzdWUgRGVjaXNpb24gTm90aWNlPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjEwLzA3LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQoxMi8wNy8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlN0YXRlbWVudCBvZiBSZWFzb25zPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjA5LzA4LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCg0KDQoNCiAgICAgICAgICAgIDxoMyBpZD0icmVsYXRlZEFwcGxpY2F0aW9ucyI+PGEgaHJlZj0iIyI+UmVsYXRlZCBBcHBsaWNhdGlvbnM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxiPk5vIGRhdGEuPC9iPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KDQoNCg0KDQoNCjxoMyBpZD0iZG9jdW1lbnRzIj48YSBocmVmPSIjIj5Eb2N1bWVudHM8L2E+PC9oMz4NCjxkaXY+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0iaWNvbi13cmFwIj4NCiAgICAgICAgICAgIDxzcGFuPnN3aXBlIHRhYmxlIHRvIHRoZSBsZWZ0IHRvIHJldmVhbCBtb3JlIGRhdGE8L3NwYW4+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1yaWdodCIgYXJpYS1oaWRkZW49InRydWUiPjwvc3Bhbj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgaWQ9ImRvYy1jb3VudCI+VG90YWwgbnVtYmVyIG9mIGRvY3VtZW50czogMzwvZGl2Pg0KICAgICAgICA8dGFibGUgaWQ9ImRvYy10YWJsZSIgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0aD5SZWNvcmQgTnVtYmVyPC90aD4NCiAgICAgICAgICAgICAgICAgICAgPHRoPk5hbWU8L3RoPg0KICAgICAgICAgICAgICAgICAgICA8dGg+RG9jdW1lbnQgVHlwZTwvdGg+DQogICAgICAgICAgICAgICAgICAgIDx0aD5TaXplPC90aD4NCiAgICAgICAgICAgICAgICAgICAgPHRoPlZpZXcgTGluazwvdGg+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyMTI0OTkxICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+QW1lbmRlZCBQbGFucyAtIDIwMTktMTg0MC5tc2c8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBDb3JyZXNwb25kZW5jZSBJTldBUkRTDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAzLjY0IE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYW9ubGluZS5neW1waWUucWxkLmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9XFB1YmxpYyBBY2Nlc3NcUEQgT25saW5lXE1hdGVyaWFsIENoYW5nZSBvZiBVc2VcMjAxOS0xODQwXFxBbWVuZGVkIFBsYW5zIC0gMjAxOS0xODQwLm1zZyZhbXA7ZmlsZU5hbWU9QW1lbmRlZCtQbGFucystKzIwMTktMTg0MC5tc2ciIHRhcmdldD0iX2JsYW5rIj5WaWV3PC9hPjwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCjIxMTUzNDkgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD5BcHBsaWNhdGlvbiBNYXRlcmlhbCAtIDIwMTktMTg0MC5wZGY8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBDb3JyZXNwb25kZW5jZSBJTldBUkRTDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAzLjM4IE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYW9ubGluZS5neW1waWUucWxkLmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9XFB1YmxpYyBBY2Nlc3NcUEQgT25saW5lXE1hdGVyaWFsIENoYW5nZSBvZiBVc2VcMjAxOS0xODQwXFxBcHBsaWNhdGlvbiBNYXRlcmlhbCAtIDIwMTktMTg0MC5wZGYmYW1wO2ZpbGVOYW1lPUFwcGxpY2F0aW9uK01hdGVyaWFsKy0rMjAxOS0xODQwLnBkZiIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjEzMjUyNCAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPkRlY2lzaW9uIE5vdGljZXMgUGFja2FnZSAtIDIwMTktMTg0MC5wZGY8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICBDb3JyZXNwb25kZW5jZSBPVVRXQVJEUw0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgOC4zMyBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGFvbmxpbmUuZ3ltcGllLnFsZC5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PVxQdWJsaWMgQWNjZXNzXFBEIE9ubGluZVxNYXRlcmlhbCBDaGFuZ2Ugb2YgVXNlXDIwMTktMTg0MFxcRGVjaXNpb24gTm90aWNlcyBQYWNrYWdlIC0gMjAxOS0xODQwLnBkZiZhbXA7ZmlsZU5hbWU9RGVjaXNpb24rTm90aWNlcytQYWNrYWdlKy0rMjAxOS0xODQwLnBkZiIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KDQogICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICA8L3RhYmxlPg0KPC9kaXY+DQoNCg0KICAgICAgICAgICAgPGgzIGlkPSJjb250YWN0VXMiPjxhIGhyZWY9IiMiPkNvbnRhY3QgVXM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxwPg0KUGxlYXNlIGNvbnRhY3QgQ291bmNpbCdzIERldmVsb3BtZW50IGFuZCBDb21wbGlhbmNlIFNlY3Rpb24gb24gMDcgNTQ4MSAwNDU0IG9yIDxhIGhyZWY9Im1haWx0bzpwbGFubmluZ0BneW1waWUucWxkLmdvdi5hdT9zdWJqZWN0PUVucXVpcnkgZm9yIEFwcGxpY2F0aW9uICg3LjIwMTkuMTg0MC4xKSI+cGxhbm5pbmdAZ3ltcGllLnFsZC5nb3YuYXU8L2E+IGZvciBmdXJ0aGVyIHF1ZXJpZXMgcmVsYXRpbmcgdG8gYW4gYXBwbGljYXRpb24uIA0KPC9wPiAgICANCjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KDQo8aDMgaWQ9Imdvb2dsZW1hcHMiPjxhIGhyZWY9IiMiPkdvb2dsZSBNYXBzPC9hPjwvaDM+DQo8ZGl2IGlkPSJtYXBfY29udGFpbmVyIj4NCiAgICA8ZGl2IGlkPSJtYXBfY2FudmFzIiBjbGFzcz0iaWZyYW1lLXJ3ZCI+DQogICAgPC9kaXY+DQo8L2Rpdj4NCg0KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgd2luZG93Lm9ubG9hZCA9IGxvYWRHb29nbGVNYXBzU2NyaXB0Ow0KDQogICAgdmFyIGdlb2NvZGVyOw0KICAgIHZhciBtYXA7DQogICAgdmFyIHRpbWVvdXQgPSAzMDA7DQogICAgdmFyIHByb3BlcnRpZXMgPSBbIjI5IEdsZW4gRWRlbiBEdmUsIEd5bXBpZSA0NTcwIFFMRCAiXTsNCiAgICB2YXIgbGF0TG5nQXJyID0gW107DQoNCiAgICBmdW5jdGlvbiBsb2FkR29vZ2xlTWFwc1NjcmlwdCgpIHsNCiAgICAgICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpOw0KICAgICAgICBzY3JpcHQudHlwZSA9ICJ0ZXh0L2phdmFzY3JpcHQiOw0KICAgICAgICBzY3JpcHQuc3JjID0gIi8vbWFwcy5nb29nbGVhcGlzLmNvbS9tYXBzL2FwaS9qcz9rZXk9QUl6YVN5REpWVXN4V3NaLVBvTjVZLUEza1NSZjB6bWlScWJQd2NVJmNhbGxiYWNrPWxvYWRHb29nbGVNYXBzIjsNCiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHJlbmRlckdvb2dsZU1hcHMoKQ0KICAgIHsNCiAgICAgICAgdmFyIG1hcE9wdGlvbnMgPSB7DQogICAgICAgICAgICBjZW50ZXI6IGxhdExuZ0FyclswXSwNCiAgICAgICAgICAgIHpvb206IDE2LA0KICAgICAgICAgICAgbWFwVHlwZUlkOiBnb29nbGUubWFwcy5NYXBUeXBlSWQuUk9BRE1BUCwNCiAgICAgICAgICAgIG1hcFR5cGVDb250cm9sOiBmYWxzZQ0KICAgICAgICB9DQoNCiAgICAgICAgbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibWFwX2NhbnZhcyIpLCBtYXBPcHRpb25zKTsNCg0KICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGREb21MaXN0ZW5lcih3aW5kb3csICdyZXNpemUnLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIHZhciBjZW50ZXIgPSBtYXAuZ2V0Q2VudGVyKCk7DQogICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC50cmlnZ2VyKG1hcCwgJ3Jlc2l6ZScpOw0KICAgICAgICAgICAgbWFwLnNldENlbnRlcihjZW50ZXIpOw0KICAgICAgICB9KTsNCg0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGxvYWRHb29nbGVNYXBzKCkgew0KICAgICAgICBnZW9jb2RlciA9IG5ldyBnb29nbGUubWFwcy5HZW9jb2RlcigpOw0KICAgICAgICB2YXIgbm9PZkZhaWxlZExvY2F0aW9uU2VhcmNoID0gMDsNCg0KICAgICAgICAkKHByb3BlcnRpZXMpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7DQogICAgICAgICAgICB2YXIgcHJvcGVydHlBZGRyZXNzID0gZWxlbWVudDsNCg0KICAgICAgICAgICAgLy9HZXQgZ2VvY29kZQ0KICAgICAgICAgICAgZ2VvY29kZXIuZ2VvY29kZSh7ICdhZGRyZXNzJzogcHJvcGVydHlBZGRyZXNzIH0sIGZ1bmN0aW9uIChyZXN1bHRzLCBzdGF0dXMpIHsNCiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09IGdvb2dsZS5tYXBzLkdlb2NvZGVyU3RhdHVzLk9LKSB7DQoNCiAgICAgICAgICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gcmVzdWx0c1swXS5nZW9tZXRyeS5sb2NhdGlvbjsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGxhdExuZyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcobG9jYXRpb24ubGF0KCksIGxvY2F0aW9uLmxuZygpKTsNCg0KICAgICAgICAgICAgICAgICAgICBsYXRMbmdBcnIucHVzaChsYXRMbmcpOw0KDQogICAgICAgICAgICAgICAgICAgIGlmKGxhdExuZ0Fyci5sZW5ndGggPT0gMSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyR29vZ2xlTWFwcygpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgLy9DcmVhdGUgbWFya2VyIGZvciBtYXAgYW5kIHBsYWNlIGl0IG9uIHRoZSBtYXANCiAgICAgICAgICAgICAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoew0KICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGxhdExuZywNCiAgICAgICAgICAgICAgICAgICAgICAgIG1hcDogbWFwDQogICAgICAgICAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50U3RyaW5nID0gJzxkaXY+PHNwYW4+JyArIHByb3BlcnR5QWRkcmVzcyArICc8L3NwYW4+PC9kaXY+JzsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGluZm93aW5kb3cgPSBuZXcgZ29vZ2xlLm1hcHMuSW5mb1dpbmRvdyh7ICAgLy9DcmVhdGUgaW5mbyB3aW5kb3cNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnRTdHJpbmcNCiAgICAgICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFya2VyLCAnY2xpY2snLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGluZm93aW5kb3cub3BlbihtYXAsIG1hcmtlcik7DQogICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAvL2lmIG5vIGxvY2F0aW9uIGZvdW5kIGJ5IGdvb2dsZSBmb3IgYSBwcm9wZXJ0eQ0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKHN0YXR1cyA9PSAiWkVST19SRVNVTFRTIikgew0KICAgICAgICAgICAgICAgICAgICBub09mRmFpbGVkTG9jYXRpb25TZWFyY2grKzsNCg0KICAgICAgICAgICAgICAgICAgICBpZihub09mRmFpbGVkTG9jYXRpb25TZWFyY2ggPT0gJChwcm9wZXJ0aWVzKS5sZW5ndGgpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VHb29nbGVNYXBzQ29udGVudCgpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PSBnb29nbGUubWFwcy5HZW9jb2RlclN0YXR1cy5PVkVSX1FVRVJZX0xJTUlUKSB7DQogICAgICAgICAgICAgICAgICAgIC8vc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IGdldEdlb0NvZGVGb3JBZGRyZXNzKGlkLCBhZGRyZXNzKTsgfSwgKHRpbWVvdXQpKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfSk7DQogICAgfQ0KDQogICAgLy9SZXBsYWNlcyBnb29nbGUgbWFwcyBjb250ZW50IHdpdGggYSBuZXcgZGl2IGJsb2NrIHRoYXQgaGFzIGluZm8gbWVzc2FnZQ0KICAgIGZ1bmN0aW9uIHJlcGxhY2VHb29nbGVNYXBzQ29udGVudCgpIHsNCiAgICAgICAgdmFyIG5ld0NvbnRlbnQgPSAnPGRpdiBjbGFzcz0idWktYWNjb3JkaW9uLWNvbnRlbnQgdWktaGVscGVyLXJlc2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1ib3R0b20iPicgKw0KICAgICAgICAgICAgJzxwPkNvdWxkblwndCBmaW5kIHRoZSBwcm9wZXJ0eSBhZGRyZXNzKGVzKSBvbiBHb29nbGUgTWFwcy4gPHA+JyArDQogICAgICAgICAgICAnPC9kaXY+JzsNCg0KICAgICAgICAkKCcjbWFwX2NvbnRhaW5lcicpLnJlcGxhY2VXaXRoKG5ld0NvbnRlbnQpOw0KICAgIH0NCg0KPC9zY3JpcHQ+DQoNCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIiBpZD0ic3VibWlzc2lvbi1tb2RhbCI+DQogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcGlubmVyIj48L2Rpdj4gPCEtLSBUaGlzIGRpdiBob3N0cyB0aGUgc3Bpbm5lciAtLT4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2xvc2UiIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGFyaWEtbGFiZWw9IkNsb3NlIj48c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSI+JnRpbWVzOzwvc3Bhbj48L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJtb2RhbC10aXRsZSI+U3VibWlzc2lvbiBmb3IgNy4yMDE5LjE4NDAuMTwvaDI+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KDQogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgew0KDQogICAgICAgICQoJyNhcHBsaWNhdGlvbicpLnRvZ2dsZXBhbmVscygpOw0KDQogICAgICAgICAgICAkKCcjZGV0YWlscycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjcHJvcGVydGllcycpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjcGVvcGxlJykuY2xpY2soKTsNCiAgICAgICAgICAgICQoJyNkZWNpc2lvbicpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZ29vZ2xlbWFwcycpLmNsaWNrKCk7DQoNCiAgICAgICAgDQoNCg0KICAgICAgICAkKCcjc3VibWlzc2lvbi1idG4nKS5jbGljayhmdW5jdGlvbiAoKSB7ICAgICAgICANCg0KDQogICAgICAgICAgICB2YXIgdXJsID0gImh0dHBzOi8vZGFvbmxpbmUuZ3ltcGllLnFsZC5nb3YuYXUvL0FwcGxpY2F0aW9uL1N1Ym1pc3Npb24vIiArIGVuY29kZVVSSSgiNy4yMDE5LjE4NDAuMSIpOw0KDQogICAgICAgICAgICAkKCcjc3VibWlzc2lvbi1tb2RhbCcpLm1vZGFsKCdzaG93JykuZmluZCgnLm1vZGFsLWJvZHknKS5sb2FkKHVybCk7DQogICAgICAgIH0pOw0KICAgIH0pOw0KDQoNCiAgICAvKiBTaG93cyBhbGwgdGhlIHBhbmVscyAqLw0KICAgIGZ1bmN0aW9uIHNob3dBbGwoKSB7DQogICAgICAgICQoJyNhcHBsaWNhdGlvbicpLmNoaWxkcmVuKCJoMyIpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoInVpLXN0YXRlLWRlZmF1bHQiKSkgew0KICAgICAgICAgICAgICAgICQodGhpcykuY2xpY2soKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgfQ0KDQoNCiAgICAvKiBIaWRlIGFsbCB0aGUgcGFuZWxzICovDQogICAgZnVuY3Rpb24gaGlkZUFsbCgpIHsNCiAgICAgICAgJCgnI2FwcGxpY2F0aW9uJykuY2hpbGRyZW4oImgzIikuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygidWktc3RhdGUtYWN0aXZlIikpIHsNCiAgICAgICAgICAgICAgICAkKHRoaXMpLmNsaWNrKCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgIH0NCg0KICAgIDwvc2NyaXB0Pg0KDQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8IS0tIC8uY29udGFpbmVyLWZsdWlkIC0tPg0KDQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPCEtLSAvI3BhZ2Utd3JhcHBlciAtLT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCiAgICAgICAgICAgIDxkaXYgaWQ9IkdyZWVuQmFyIj4NCiAgICAgICAgICAgICAgICA8YSBzdHlsZT0iY3Vyc29yOmRlZmF1bHQiPiBDb3B5cmlnaHQgwqkgMjAxOCBDaXZpY2EgfCA8L2E+DQogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ3ltcGllLnFsZC5nb3YuYXUvZGlzY2xhaW1lciIgdGFyZ2V0PSJfcGFyZW50Ij5Db3B5cmlnaHQgYW5kIERpc2NsYWltZXI8L2E+DQogICAgICAgICAgICAgICAgPGEgc3R5bGU9ImN1cnNvcjpkZWZhdWx0Ij4gfCA8L2E+DQogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ3ltcGllLnFsZC5nb3YuYXUvcHJpdmFjeS1zdGF0ZW1lbnQiIHRhcmdldD0iX3BhcmVudCI+UHJpdmFjeSBTdGF0ZW1lbnQ8L2E+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXY+IDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCg0KICAgIDxkaXYgaWQ9InRpcHRpcF9ob2xkZXIiIHN0eWxlPSJtYXgtd2lkdGg6MzAwcHg7Ij48ZGl2IGlkPSJ0aXB0aXBfYXJyb3ciPjxkaXYgaWQ9InRpcHRpcF9hcnJvd19pbm5lciI+PC9kaXY+PC9kaXY+PGRpdiBpZD0idGlwdGlwX2NvbnRlbnQiPjwvZGl2PjwvZGl2Pg0KPC9ib2R5Pg0KDQo8c2NyaXB0IGFzeW5jIHNyYz0iaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vZ3RhZy9qcz9pZD1VQS0xMjE3NzM3NzctMSI+PC9zY3JpcHQ+DQo8c2NyaXB0Pg0KCXdpbmRvdy5kYXRhTGF5ZXIgPSB3aW5kb3cuZGF0YUxheWVyIHx8IFtdOw0KCWZ1bmN0aW9uIGd0YWcoKXtkYXRhTGF5ZXIucHVzaChhcmd1bWVudHMpO30NCglndGFnKCdqcycsIG5ldyBEYXRlKCkpOw0KDQoJZ3RhZygnY29uZmlnJywgJ1VBLTEyMTc3Mzc3Ny0xJyk7DQo8L3NjcmlwdD4NCjwvaHRtbD4NCg==
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Application/ApplicationDetails/008.2019.00001874.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=rnx1snuirhljysqpyav0xgks; User=accessAllowed-MasterView=True
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 17 Sep 2019 02:22:32 GMT
      Content-Length:
      - '27942'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Application/ApplicationDetails/007.2019.00001677.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=rnx1snuirhljysqpyav0xgks; User=accessAllowed-MasterView=True
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 17 Sep 2019 02:22:32 GMT
      Content-Length:
      - '30811'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Application/ApplicationDetails/007.2019.00001835.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=rnx1snuirhljysqpyav0xgks; User=accessAllowed-MasterView=True
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 17 Sep 2019 02:22:33 GMT
      Content-Length:
      - '33432'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://daonline.gympie.qld.gov.au/Application/ApplicationDetails/008.2019.00001671.001
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=rnx1snuirhljysqpyav0xgks; User=accessAllowed-MasterView=True
      Host:
      - daonline.gympie.qld.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache, no-store
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/8.5
      X-Aspnetmvc-Version:
      - '5.2'
      X-Aspnet-Version:
      - 4.0.30319
      X-Powered-By:
      - ASP.NET
      Date:
      - Tue, 17 Sep 2019 02:22:33 GMT
      Content-Length:
      - '27899'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQo8aGVhZD4NCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPg0KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgICA8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iR3ltcGllIFJlZ2lvbmFsIENvdW5jaWwsREEgVHJhY2tlcixEZXZlbG9wbWVudCBBcHBsaWNhdGlvbixEZXZlbG9wbWVudCBBcHBsaWNhdGlvbiBUcmFja2luZywgREEgRW5xdWlyeSwgRGV2ZWxvcG1lbnQgQXBwbGljYXRpb24gRW5xdWlyeSwgQXBwbGljYXRpb24gVHJhY2tlciI+DQogICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IlRoZSBvZmZpY2lhbCBHeW1waWUgUmVnaW9uYWwgQ291bmNpbCBBcHBsaWNhdGlvbiBUcmFja2VyIj4NCg0KICAgIDx0aXRsZT5HeW1waWUgUmVnaW9uYWwgQ291bmNpbCAtIEFwcGxpY2F0aW9uIFRyYWNrZXI8L3RpdGxlPg0KDQogICAgPCEtLWZhdmljb24tLT4NCiAgICA8bGluayBocmVmPSIvZmF2aWNvbi5pY28iIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIj4NCg0KICAgIDwhLS0galF1ZXJ5IC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9qcXVlcnktMS4xMS4xLmpzIj48L3NjcmlwdD4NCg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9qcXVlcnktdWktMS4xMS4yLmpzIj48L3NjcmlwdD4NCg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L3RoZW1lcy9iYXNlL2NvcmUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9Db250ZW50L3RoZW1lcy9iYXNlL2FjY29yZGlvbi5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvdGhlbWVzL2Jhc2UvdGhlbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPCEtLSBCb290c3RyYXAgLS0+DQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2Jvb3RzdHJhcC5qcyI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9ib290c3RyYXAtdGhlbWUuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9Db250ZW50L2Jvb3RzdHJhcC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvZm9udC1hd2Vzb21lLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQoNCg0KICAgIDwhLS0gRGF0YVRhYmxlcyAtLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvRGF0YVRhYmxlcy9qcXVlcnkuZGF0YVRhYmxlcy5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdHMvRGF0YVRhYmxlcy9kYXRhVGFibGVzLmJvb3RzdHJhcC5qcyI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL1NjcmlwdHMvRGF0YVRhYmxlcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUuanMiPjwvc2NyaXB0Pg0KDQogICAgDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5ib290c3RyYXAuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCjxsaW5rIGhyZWY9Ii9Db250ZW50L0RhdGFUYWJsZXMvY3NzL2RhdGFUYWJsZXMucmVzcG9uc2l2ZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL0NvbnRlbnQvRGF0YVRhYmxlcy9jc3MvZGF0YVRhYmxlcy5yZXNwb25zaXZlLnNjc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQoNCiAgICA8IS0tIEJvb3RzdHJhcCBTQi1BZG1pbi0yIFBsdWdpbiBhbmQgb3RoZXIgY3NzIGFuZCBqcyBmaWxlcy0tPg0KICAgIDxzY3JpcHQgc3JjPSIvanMvYm9vdHN0cmFwLWNvbWJvYm94LmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvYm9vdHN0cmFwLWRhdGVwaWNrZXIuanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9ib290c3RyYXAtZGlhbG9nLmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvanF1ZXJ5LmZvcm0uanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9qcXVlcnkudGFibGVzb3J0ZXIuanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9qcy9tYXN0ZXJ2aWV3LmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvbWV0aXNNZW51LmpzIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvanMvc2ItYWRtaW4tMi5qcyI+PC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvY3NzL2Jvb3RzdHJhcC1jb21ib2JveC5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9kYXRlcGlja2VyMy5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgaHJlZj0iL2Nzcy9tYXN0ZXJ2aWV3LWN1c3RvbWlzYXRpb25zLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayBocmVmPSIvY3NzL3NiLWFkbWluLTIuY3NzIiByZWw9InN0eWxlc2hlZXQiLz4NCg0KDQogICAgPGxpbmsgaHJlZj0iL0NvdW5jaWxfVGhlbWUvZ3ltcGllL2d5bXBpZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgDQoNCiAgICA8IS0tIEhUTUw1IFNoaW0gYW5kIFJlc3BvbmQuanMgSUU4IHN1cHBvcnQgb2YgSFRNTDUgZWxlbWVudHMgYW5kIG1lZGlhIHF1ZXJpZXMgLS0+DQogICAgPCEtLSBXQVJOSU5HOiBSZXNwb25kLmpzIGRvZXNuJ3Qgd29yayBpZiB5b3UgdmlldyB0aGUgcGFnZSB2aWEgZmlsZTovLyAtLT4NCiAgICA8IS0tW2lmIGx0IElFIDldPg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL2h0bWw1c2hpdi8zLjcuMC9odG1sNXNoaXYuanMiPjwvc2NyaXB0Pg0KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9saWJzL3Jlc3BvbmQuanMvMS40LjIvcmVzcG9uZC5taW4uanMiPjwvc2NyaXB0Pg0KICAgIDwhW2VuZGlmXS0tPg0KPC9oZWFkPg0KDQoNCg0KPGJvZHk+DQogICAgPGRpdiBjbGFzcz0icHVzaG1lbnUgY2JwLXNwbWVudS1wdXNoIj4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4NCiAgICAgICAgICAgIDxoZWFkZXIgaWQ9IkhlYWRlciI+DQogICAgICAgICAgICAgICAgPG5hdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1kZWZhdWx0IiByb2xlPSJuYXZpZ2F0aW9uIiBpZD0iTmF2QmFyIj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSBCcmFuZCBhbmQgdG9nZ2xlIGdldCBncm91cGVkIGZvciBiZXR0ZXIgbW9iaWxlIGRpc3BsYXkgLS0+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZnIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idXRpbHMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuZ3ltcGllLnFsZC5nb3YuYXUiPkhvbWU8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3Lmd5bXBpZS5xbGQuZ292LmF1L2NvbnRhY3QtdXMiPkNvbnRhY3QgVXM8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8aDEgaWQ9ImxvZ28iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmd5bXBpZS5xbGQuZ292LmF1Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9Db3VuY2lsX1RoZW1lL2d5bXBpZS9sb2dvLnBuZyIgYWx0PSJHeW1waWUgUmVnaW9uYWwgQ291bmNpbCI+PHN0cm9uZyBjbGFzcz0idmgiPkd5bXBpZSBSZWdpb25hbCBDb3VuY2lsPC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9oMT4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICA8L2hlYWRlcj4NCg0KICAgICAgICAgICAgPGRpdiBpZD0iY29udGVudCI+DQogICAgICAgICAgICAgICAgPCEtLSBOYXZpZ2F0aW9uIC0tPg0KICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZGVmYXVsdCBuYXZiYXItc3RhdGljLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDAiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0ibmF2YmFyLXRvZ2dsZSIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iLm5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBuYXZpZ2F0aW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2YmFyLWJyYW5kIiBocmVmPSIvSG9tZS9JbmRleCI+PC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdmJhci1oZWFkZXIgLS0+DQogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdmJhci10b3AtbGlua3MgbmF2YmFyLXJpZ2h0IGhpZGRlbi14cyBoaWRkZW4tc20gaGlkZGVuLW1kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48c3BhbiBpZD0icHJpbnRJY29uIiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1wcmludCIgb25jbGljaz0id2luZG93LnByaW50KCk7Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgPC91bD4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItZGVmYXVsdCBzaWRlYmFyIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNpZGViYXItbmF2IG5hdmJhci1jb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYiIGlkPSJzaWRlLW1lbnUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbiBUcmFja2VyPHNwYW4gY2xhc3M9ImZhIGFycm93Ij48L3NwYW4+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtc2Vjb25kLWxldmVsIGNvbGxhcHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvQWJvdXQgdGFyZ2V0PV9zZWxmPldoYXQgaXMgQXBwbGljYXRpb24gVHJhY2tlcj88L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0hvbWUvRGlzY2xhaW1lciB0YXJnZXQ9X3NlbGY+RGlzY2xhaW1lcjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnM8c3BhbiBjbGFzcz0iZmEgYXJyb3ciPjwvc3Bhbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi1zZWNvbmQtbGV2ZWwgY29sbGFwc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9JbmRleCB0YXJnZXQ9PkFwcGxpY2F0aW9uIFRyYWNrZXIgSG9tZTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vSG9tZS9TZWFyY2ggaWQ9c2VhcmNoIHRhcmdldD1fc2VsZj5TZWFyY2g8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P1JlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9VHJ1ZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgaWQ9b3V0c3RhbmRpbmctYXBwcyB0YXJnZXQ9X3NlbGY+VW5kZXRlcm1pbmVkIEFwcGxpY2F0aW9uczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/UmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPVRydWUmSW5jbHVkZURvY3VtZW50cz1GYWxzZSBpZD1leGhpYml0ZWQtYXBwcyB0YXJnZXQ9X3NlbGY+QXBwbGljYXRpb25zIE9uIEV4aGliaXRpb248L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSAvLm5hdi1zZWNvbmQtbGV2ZWwgLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjdGl2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxpIGNsYXNzPSJmYSBmYS1saXN0LXVsIGZhLWZ3Ij48L2k+QXBwbGljYXRpb25zIFN1Ym1pdHRlZDxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xNiUyZjA5JTJmMjAxOSZEYXRlVG89MTclMmYwOSUyZjIwMTkmRGF0ZVR5cGU9MSZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9RmFsc2UmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5UaGlzIFdlZWs8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTglMmYwOSUyZjIwMTkmRGF0ZVRvPTE0JTJmMDklMmYyMDE5JkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBXZWVrPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xJTJmMDklMmYyMDE5JkRhdGVUbz0xNyUyZjA5JTJmMjAxOSZEYXRlVHlwZT0xJlJlbW92ZVVuZGV0ZXJtaW5lZEFwcGxpY2F0aW9ucz1GYWxzZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwOCUyZjIwMTkmRGF0ZVRvPTMxJTJmMDglMmYyMDE5JkRhdGVUeXBlPTEmUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPUZhbHNlJkFwcGxpY2F0aW9uVHlwZT0mU2hvd091dHN0YW5kaW5nQXBwbGljYXRpb25zPUZhbHNlJlNob3dFeGhpYml0ZWRBcHBsaWNhdGlvbnM9RmFsc2UmSW5jbHVkZURvY3VtZW50cz1GYWxzZSB0YXJnZXQ9X3NlbGY+TGFzdCBNb250aDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8ubmF2LXNlY29uZC1sZXZlbCAtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PGkgY2xhc3M9ImZhIGZhLWxpc3QtdWwgZmEtZnciPjwvaT5BcHBsaWNhdGlvbnMgRGV0ZXJtaW5lZDxzcGFuIGNsYXNzPSJmYSBhcnJvdyI+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXNlY29uZC1sZXZlbCBjb2xsYXBzZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPS9BcHBsaWNhdGlvbi9BZHZhbmNlZFNlYXJjaFJlc3VsdD9EYXRlRnJvbT0xNiUyZjA5JTJmMjAxOSZEYXRlVG89MTclMmYwOSUyZjIwMTkmRGF0ZVR5cGU9MiZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9VHJ1ZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209OCUyZjA5JTJmMjAxOSZEYXRlVG89MTQlMmYwOSUyZjIwMTkmRGF0ZVR5cGU9MiZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9VHJ1ZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPkxhc3QgV2VlazwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0vQXBwbGljYXRpb24vQWR2YW5jZWRTZWFyY2hSZXN1bHQ/RGF0ZUZyb209MSUyZjA5JTJmMjAxOSZEYXRlVG89MTclMmYwOSUyZjIwMTkmRGF0ZVR5cGU9MiZSZW1vdmVVbmRldGVybWluZWRBcHBsaWNhdGlvbnM9VHJ1ZSZBcHBsaWNhdGlvblR5cGU9JlNob3dPdXRzdGFuZGluZ0FwcGxpY2F0aW9ucz1GYWxzZSZTaG93RXhoaWJpdGVkQXBwbGljYXRpb25zPUZhbHNlJkluY2x1ZGVEb2N1bWVudHM9RmFsc2UgdGFyZ2V0PV9zZWxmPlRoaXMgTW9udGg8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9L0FwcGxpY2F0aW9uL0FkdmFuY2VkU2VhcmNoUmVzdWx0P0RhdGVGcm9tPTElMmYwOCUyZjIwMTkmRGF0ZVRvPTMxJTJmMDglMmYyMDE5JkRhdGVUeXBlPTImUmVtb3ZlVW5kZXRlcm1pbmVkQXBwbGljYXRpb25zPVRydWUmQXBwbGljYXRpb25UeXBlPSZTaG93T3V0c3RhbmRpbmdBcHBsaWNhdGlvbnM9RmFsc2UmU2hvd0V4aGliaXRlZEFwcGxpY2F0aW9ucz1GYWxzZSZJbmNsdWRlRG9jdW1lbnRzPUZhbHNlIHRhcmdldD1fc2VsZj5MYXN0IE1vbnRoPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gLy5uYXYtc2Vjb25kLWxldmVsIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8uc2lkZWJhci1jb2xsYXBzZSAtLT4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwhLS0gLy5uYXZiYXItc3RhdGljLXNpZGUgLS0+DQogICAgICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICAgICAgPGRpdiBpZD0icGFnZS13cmFwcGVyIj4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXItZmx1aWQiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICANCg0KDQogICAgPGRpdiBjbGFzcz0icGFnZS1oZWFkZXIiPg0KICAgICAgICA8aDI+QXBwbGljYXRpb246IFJlY29uZmlndXJpbmcgYSBMb3QgKDguMjAxOS4xNjcxLjEpPC9oMj4NCiAgICA8L2Rpdj4NCiAgICA8aDQ+RGV0YWlsZWQgaW5mb3JtYXRpb24gcmVsYXRlZCB0byB0aGUgYXBwbGljYXRpb246PC9oND4NCiAgICA8YnIgLz4NCiAgICA8ZGl2Pg0KICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnNob3dBbGwoKTsiPlNob3cgQWxsPC9hPiAvDQogICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6aGlkZUFsbCgpOyI+SGlkZSBBbGw8L2E+DQogICAgPC9kaXY+DQogICAgPGRpdiBpZD0iYXBwbGljYXRpb24iPg0KDQogICAgICAgICAgICA8aDMgaWQ9ImRldGFpbHMiPjxhIGhyZWY9IiMiPkRldGFpbHM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRlc2NyaXB0aW9uOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0iZGVzY3JpcHRpb24iPlN1YmRpdmlzaW9uIHRvIENyZWF0ZSBUd28gKDIpIE5ldyBMb3RzIGZyb20gVHdvICgyKSBFeGlzdGluZyBMb3RzPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlN1Ym1pdHRlZCBEYXRlOiA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE2LzA0LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFR5cGU6IDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlJlY29uZmlndXJpbmcgYSBMb3Q8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0icHJvcGVydGllcyI+PGEgaHJlZj0iIyI+UHJvcGVydGllczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9InByb3BlcnR5LWxpc3QiPjMzIEN1bGxpbmFuZSBSZCwgTW90aGFyIE1vdW50YWluIDQ1NzAgUUxEICAoTE9UOiAzIFJQOiAyMjI3MTApPGJyLz45MyBDdWxsaW5hbmUgUmQsIE1vdGhhciBNb3VudGFpbiA0NTcwIFFMRCAgKExvdDogNDQgTTogMzcxMDg1KTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJwZW9wbGUiPjxhIGhyZWY9IiMiPlBlb3BsZTwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFwcGxpY2FudDogIFBsYW5zbWFydCBEZXZlbG9wbWVudCBTb2x1dGlvbnMNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBc3Nlc3NtZW50IE1hbmFnZXI6ICBHeW1waWUgUmVnaW9uYWwgQ291bmNpbA0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxoMyBpZD0ib2ZmaWNlciI+PGEgaHJlZj0iIyI+T2ZmaWNlcjwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9Im9mZmljZXJOYW1lIj5QYXRyaWNoIEZlcnJpczwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5Pg0KICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGgzIGlkPSJkZWNpc2lvbiI+PGEgaHJlZj0iIyI+RGVjaXNpb248L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgPHRhYmxlPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkFwcGxpY2F0aW9uIFN0YXR1czogRGV0ZXJtaW5lZDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGV0ZXJtaW5hdGlvbiBEYXRlOg0KMjIvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5EZXRlcm1pbmF0aW9uIFR5cGU6IEFwcHJvdmVkIGJ5IERlbGVnYXRpb248L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KICAgICAgICAgICAgPGgzIGlkPSJ0cmFja2luZyI+PGEgaHJlZj0iIyI+VHJhY2tpbmc8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24td3JhcCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5zd2lwZSB0YWJsZSB0byB0aGUgbGVmdCB0byByZXZlYWwgbW9yZSBkYXRhPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tYXJyb3ctcmlnaHQiIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EZXNjcmlwdGlvbjwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db21tZW5jZWQgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5Db21wbGV0ZWQgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Db25maXJtYXRpb24gUGVyaW9kPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjE2LzA0LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowMy8wNS8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRlY2lzaW9uIEFzc2Vzc21lbnQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPg0KMDIvMDUvMjAxOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjIyLzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+SXNzdWUgRGVjaXNpb24gTm90aWNlPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjIyLzA1LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQowNC8wNi8yMDE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlN0YXRlbWVudCBvZiBSZWFzb25zPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCjAyLzA3LzIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCg0KDQoNCiAgICAgICAgICAgIDxoMyBpZD0icmVsYXRlZEFwcGxpY2F0aW9ucyI+PGEgaHJlZj0iIyI+UmVsYXRlZCBBcHBsaWNhdGlvbnM8L2E+PC9oMz4NCiAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxiPk5vIGRhdGEuPC9iPg0KICAgICAgICAgICAgPC9kaXY+DQoNCg0KDQoNCg0KDQoNCjxoMyBpZD0iZG9jdW1lbnRzIj48YSBocmVmPSIjIj5Eb2N1bWVudHM8L2E+PC9oMz4NCjxkaXY+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0iaWNvbi13cmFwIj4NCiAgICAgICAgICAgIDxzcGFuPnN3aXBlIHRhYmxlIHRvIHRoZSBsZWZ0IHRvIHJldmVhbCBtb3JlIGRhdGE8L3NwYW4+DQogICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1hcnJvdy1yaWdodCIgYXJpYS1oaWRkZW49InRydWUiPjwvc3Bhbj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgaWQ9ImRvYy1jb3VudCI+VG90YWwgbnVtYmVyIG9mIGRvY3VtZW50czogMjwvZGl2Pg0KICAgICAgICA8dGFibGUgaWQ9ImRvYy10YWJsZSIgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbm8tZm9vdGVyIj4NCiAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgIDx0aD5SZWNvcmQgTnVtYmVyPC90aD4NCiAgICAgICAgICAgICAgICAgICAgPHRoPk5hbWU8L3RoPg0KICAgICAgICAgICAgICAgICAgICA8dGg+RG9jdW1lbnQgVHlwZTwvdGg+DQogICAgICAgICAgICAgICAgICAgIDx0aD5TaXplPC90aD4NCiAgICAgICAgICAgICAgICAgICAgPHRoPlZpZXcgTGluazwvdGg+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoyMTEzMjA2ICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+QXBwbGljYXRpb24gTWF0ZXJpYWwgLSAyMDE5LTE2NzEucGRmPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KICAgICAgICAgICAgICAgICAgICAgICAgQ29ycmVzcG9uZGVuY2UgSU5XQVJEUw0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgMy44NSBNQg0KDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD48YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiByb2xlPSJidXR0b24iIGhyZWY9Imh0dHBzOi8vZGFvbmxpbmUuZ3ltcGllLnFsZC5nb3YuYXUvRG9jdW1lbnQvRG93bmxvYWQ/a2V5PVxQdWJsaWMgQWNjZXNzXFBEIE9ubGluZVxSZWNvbmZpZ3VyYXRpb24gb2YgYSBMb3RcMjAxOS0xNjcxXFxBcHBsaWNhdGlvbiBNYXRlcmlhbCAtIDIwMTktMTY3MS5wZGYmYW1wO2ZpbGVOYW1lPUFwcGxpY2F0aW9uK01hdGVyaWFsKy0rMjAxOS0xNjcxLnBkZiIgdGFyZ2V0PSJfYmxhbmsiPlZpZXc8L2E+PC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KMjEyMjcwMSAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPkRlY2lzaW9uIE5vdGljZSBQYWNrYWdlIC0gMjAxOS0xNjcxLnBkZjwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIENvcnJlc3BvbmRlbmNlIE9VVFdBUkRTDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyLjU4IE1CDQoNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPjxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHJvbGU9ImJ1dHRvbiIgaHJlZj0iaHR0cHM6Ly9kYW9ubGluZS5neW1waWUucWxkLmdvdi5hdS9Eb2N1bWVudC9Eb3dubG9hZD9rZXk9XFB1YmxpYyBBY2Nlc3NcUEQgT25saW5lXFJlY29uZmlndXJhdGlvbiBvZiBhIExvdFwyMDE5LTE2NzFcXERlY2lzaW9uIE5vdGljZSBQYWNrYWdlIC0gMjAxOS0xNjcxLnBkZiZhbXA7ZmlsZU5hbWU9RGVjaXNpb24rTm90aWNlK1BhY2thZ2UrLSsyMDE5LTE2NzEucGRmIiB0YXJnZXQ9Il9ibGFuayI+VmlldzwvYT48L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQoNCiAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgIDwvdGFibGU+DQo8L2Rpdj4NCg0KDQogICAgICAgICAgICA8aDMgaWQ9ImNvbnRhY3RVcyI+PGEgaHJlZj0iIyI+Q29udGFjdCBVczwvYT48L2gzPg0KICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICA8dGFibGU+DQogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PHA+DQpQbGVhc2UgY29udGFjdCBDb3VuY2lsJ3MgRGV2ZWxvcG1lbnQgYW5kIENvbXBsaWFuY2UgU2VjdGlvbiBvbiAwNyA1NDgxIDA0NTQgb3IgPGEgaHJlZj0ibWFpbHRvOnBsYW5uaW5nQGd5bXBpZS5xbGQuZ292LmF1P3N1YmplY3Q9RW5xdWlyeSBmb3IgQXBwbGljYXRpb24gKDguMjAxOS4xNjcxLjEpIj5wbGFubmluZ0BneW1waWUucWxkLmdvdi5hdTwvYT4gZm9yIGZ1cnRoZXIgcXVlcmllcyByZWxhdGluZyB0byBhbiBhcHBsaWNhdGlvbi4gDQo8L3A+ICAgIA0KPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQoNCjxoMyBpZD0iZ29vZ2xlbWFwcyI+PGEgaHJlZj0iIyI+R29vZ2xlIE1hcHM8L2E+PC9oMz4NCjxkaXYgaWQ9Im1hcF9jb250YWluZXIiPg0KICAgIDxkaXYgaWQ9Im1hcF9jYW52YXMiIGNsYXNzPSJpZnJhbWUtcndkIj4NCiAgICA8L2Rpdj4NCjwvZGl2Pg0KDQo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQoNCiAgICB3aW5kb3cub25sb2FkID0gbG9hZEdvb2dsZU1hcHNTY3JpcHQ7DQoNCiAgICB2YXIgZ2VvY29kZXI7DQogICAgdmFyIG1hcDsNCiAgICB2YXIgdGltZW91dCA9IDMwMDsNCiAgICB2YXIgcHJvcGVydGllcyA9IFsiMzMgQ3VsbGluYW5lIFJkLCBNb3RoYXIgTW91bnRhaW4gNDU3MCBRTEQgIiwiOTMgQ3VsbGluYW5lIFJkLCBNb3RoYXIgTW91bnRhaW4gNDU3MCBRTEQgIl07DQogICAgdmFyIGxhdExuZ0FyciA9IFtdOw0KDQogICAgZnVuY3Rpb24gbG9hZEdvb2dsZU1hcHNTY3JpcHQoKSB7DQogICAgICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTsNCiAgICAgICAgc2NyaXB0LnR5cGUgPSAidGV4dC9qYXZhc2NyaXB0IjsNCiAgICAgICAgc2NyaXB0LnNyYyA9ICIvL21hcHMuZ29vZ2xlYXBpcy5jb20vbWFwcy9hcGkvanM/a2V5PUFJemFTeURKVlVzeFdzWi1Qb041WS1BM2tTUmYwem1pUnFiUHdjVSZjYWxsYmFjaz1sb2FkR29vZ2xlTWFwcyI7DQogICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiByZW5kZXJHb29nbGVNYXBzKCkNCiAgICB7DQogICAgICAgIHZhciBtYXBPcHRpb25zID0gew0KICAgICAgICAgICAgY2VudGVyOiBsYXRMbmdBcnJbMF0sDQogICAgICAgICAgICB6b29tOiAxNiwNCiAgICAgICAgICAgIG1hcFR5cGVJZDogZ29vZ2xlLm1hcHMuTWFwVHlwZUlkLlJPQURNQVAsDQogICAgICAgICAgICBtYXBUeXBlQ29udHJvbDogZmFsc2UNCiAgICAgICAgfQ0KDQogICAgICAgIG1hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1hcF9jYW52YXMiKSwgbWFwT3B0aW9ucyk7DQoNCiAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkRG9tTGlzdGVuZXIod2luZG93LCAncmVzaXplJywgZnVuY3Rpb24oKSB7DQogICAgICAgICAgICB2YXIgY2VudGVyID0gbWFwLmdldENlbnRlcigpOw0KICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQudHJpZ2dlcihtYXAsICdyZXNpemUnKTsNCiAgICAgICAgICAgIG1hcC5zZXRDZW50ZXIoY2VudGVyKTsNCiAgICAgICAgfSk7DQoNCiAgICB9DQoNCiAgICBmdW5jdGlvbiBsb2FkR29vZ2xlTWFwcygpIHsNCiAgICAgICAgZ2VvY29kZXIgPSBuZXcgZ29vZ2xlLm1hcHMuR2VvY29kZXIoKTsNCiAgICAgICAgdmFyIG5vT2ZGYWlsZWRMb2NhdGlvblNlYXJjaCA9IDA7DQoNCiAgICAgICAgJChwcm9wZXJ0aWVzKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkgew0KICAgICAgICAgICAgdmFyIHByb3BlcnR5QWRkcmVzcyA9IGVsZW1lbnQ7DQoNCiAgICAgICAgICAgIC8vR2V0IGdlb2NvZGUNCiAgICAgICAgICAgIGdlb2NvZGVyLmdlb2NvZGUoeyAnYWRkcmVzcyc6IHByb3BlcnR5QWRkcmVzcyB9LCBmdW5jdGlvbiAocmVzdWx0cywgc3RhdHVzKSB7DQogICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PSBnb29nbGUubWFwcy5HZW9jb2RlclN0YXR1cy5PSykgew0KDQogICAgICAgICAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IHJlc3VsdHNbMF0uZ2VvbWV0cnkubG9jYXRpb247DQogICAgICAgICAgICAgICAgICAgIHZhciBsYXRMbmcgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKGxvY2F0aW9uLmxhdCgpLCBsb2NhdGlvbi5sbmcoKSk7DQoNCiAgICAgICAgICAgICAgICAgICAgbGF0TG5nQXJyLnB1c2gobGF0TG5nKTsNCg0KICAgICAgICAgICAgICAgICAgICBpZihsYXRMbmdBcnIubGVuZ3RoID09IDEpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckdvb2dsZU1hcHMoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIC8vQ3JlYXRlIG1hcmtlciBmb3IgbWFwIGFuZCBwbGFjZSBpdCBvbiB0aGUgbWFwDQogICAgICAgICAgICAgICAgICAgIHZhciBtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBsYXRMbmcsDQogICAgICAgICAgICAgICAgICAgICAgICBtYXA6IG1hcA0KICAgICAgICAgICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgICAgICAgICB2YXIgY29udGVudFN0cmluZyA9ICc8ZGl2PjxzcGFuPicgKyBwcm9wZXJ0eUFkZHJlc3MgKyAnPC9zcGFuPjwvZGl2Pic7DQogICAgICAgICAgICAgICAgICAgIHZhciBpbmZvd2luZG93ID0gbmV3IGdvb2dsZS5tYXBzLkluZm9XaW5kb3coeyAgIC8vQ3JlYXRlIGluZm8gd2luZG93DQogICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBjb250ZW50U3RyaW5nDQogICAgICAgICAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcmtlciwgJ2NsaWNrJywgZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpbmZvd2luZG93Lm9wZW4obWFwLCBtYXJrZXIpOw0KICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgLy9pZiBubyBsb2NhdGlvbiBmb3VuZCBieSBnb29nbGUgZm9yIGEgcHJvcGVydHkNCiAgICAgICAgICAgICAgICBlbHNlIGlmIChzdGF0dXMgPT0gIlpFUk9fUkVTVUxUUyIpIHsNCiAgICAgICAgICAgICAgICAgICAgbm9PZkZhaWxlZExvY2F0aW9uU2VhcmNoKys7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYobm9PZkZhaWxlZExvY2F0aW9uU2VhcmNoID09ICQocHJvcGVydGllcykubGVuZ3RoKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlR29vZ2xlTWFwc0NvbnRlbnQoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPT0gZ29vZ2xlLm1hcHMuR2VvY29kZXJTdGF0dXMuT1ZFUl9RVUVSWV9MSU1JVCkgew0KICAgICAgICAgICAgICAgICAgICAvL3NldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyBnZXRHZW9Db2RlRm9yQWRkcmVzcyhpZCwgYWRkcmVzcyk7IH0sICh0aW1lb3V0KSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0pOw0KICAgIH0NCg0KICAgIC8vUmVwbGFjZXMgZ29vZ2xlIG1hcHMgY29udGVudCB3aXRoIGEgbmV3IGRpdiBibG9jayB0aGF0IGhhcyBpbmZvIG1lc3NhZ2UNCiAgICBmdW5jdGlvbiByZXBsYWNlR29vZ2xlTWFwc0NvbnRlbnQoKSB7DQogICAgICAgIHZhciBuZXdDb250ZW50ID0gJzxkaXYgY2xhc3M9InVpLWFjY29yZGlvbi1jb250ZW50IHVpLWhlbHBlci1yZXNldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYm90dG9tIj4nICsNCiAgICAgICAgICAgICc8cD5Db3VsZG5cJ3QgZmluZCB0aGUgcHJvcGVydHkgYWRkcmVzcyhlcykgb24gR29vZ2xlIE1hcHMuIDxwPicgKw0KICAgICAgICAgICAgJzwvZGl2Pic7DQoNCiAgICAgICAgJCgnI21hcF9jb250YWluZXInKS5yZXBsYWNlV2l0aChuZXdDb250ZW50KTsNCiAgICB9DQoNCjwvc2NyaXB0Pg0KDQogICAgPC9kaXY+DQogICAgPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgaWQ9InN1Ym1pc3Npb24tbW9kYWwiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2ciPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3Bpbm5lciI+PC9kaXY+IDwhLS0gVGhpcyBkaXYgaG9zdHMgdGhlIHNwaW5uZXIgLS0+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBkYXRhLWRpc21pc3M9Im1vZGFsIiBhcmlhLWxhYmVsPSJDbG9zZSI+PHNwYW4gYXJpYS1oaWRkZW49InRydWUiPiZ0aW1lczs8L3NwYW4+PC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0ibW9kYWwtdGl0bGUiPlN1Ym1pc3Npb24gZm9yIDguMjAxOS4xNjcxLjE8L2gyPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCg0KICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHsNCg0KICAgICAgICAkKCcjYXBwbGljYXRpb24nKS50b2dnbGVwYW5lbHMoKTsNCg0KICAgICAgICAgICAgJCgnI2RldGFpbHMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI3Byb3BlcnRpZXMnKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI3Blb3BsZScpLmNsaWNrKCk7DQogICAgICAgICAgICAkKCcjZGVjaXNpb24nKS5jbGljaygpOw0KICAgICAgICAgICAgJCgnI2dvb2dsZW1hcHMnKS5jbGljaygpOw0KDQogICAgICAgIA0KDQoNCiAgICAgICAgJCgnI3N1Ym1pc3Npb24tYnRuJykuY2xpY2soZnVuY3Rpb24gKCkgeyAgICAgICAgDQoNCg0KICAgICAgICAgICAgdmFyIHVybCA9ICJodHRwczovL2Rhb25saW5lLmd5bXBpZS5xbGQuZ292LmF1Ly9BcHBsaWNhdGlvbi9TdWJtaXNzaW9uLyIgKyBlbmNvZGVVUkkoIjguMjAxOS4xNjcxLjEiKTsNCg0KICAgICAgICAgICAgJCgnI3N1Ym1pc3Npb24tbW9kYWwnKS5tb2RhbCgnc2hvdycpLmZpbmQoJy5tb2RhbC1ib2R5JykubG9hZCh1cmwpOw0KICAgICAgICB9KTsNCiAgICB9KTsNCg0KDQogICAgLyogU2hvd3MgYWxsIHRoZSBwYW5lbHMgKi8NCiAgICBmdW5jdGlvbiBzaG93QWxsKCkgew0KICAgICAgICAkKCcjYXBwbGljYXRpb24nKS5jaGlsZHJlbigiaDMiKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCJ1aS1zdGF0ZS1kZWZhdWx0IikpIHsNCiAgICAgICAgICAgICAgICAkKHRoaXMpLmNsaWNrKCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgIH0NCg0KDQogICAgLyogSGlkZSBhbGwgdGhlIHBhbmVscyAqLw0KICAgIGZ1bmN0aW9uIGhpZGVBbGwoKSB7DQogICAgICAgICQoJyNhcHBsaWNhdGlvbicpLmNoaWxkcmVuKCJoMyIpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoInVpLXN0YXRlLWFjdGl2ZSIpKSB7DQogICAgICAgICAgICAgICAgJCh0aGlzKS5jbGljaygpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICA8L3NjcmlwdD4NCg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPCEtLSAvLmNvbnRhaW5lci1mbHVpZCAtLT4NCg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwhLS0gLyNwYWdlLXdyYXBwZXIgLS0+DQogICAgICAgICAgICA8L2Rpdj4NCg0KDQogICAgICAgICAgICA8ZGl2IGlkPSJHcmVlbkJhciI+DQogICAgICAgICAgICAgICAgPGEgc3R5bGU9ImN1cnNvcjpkZWZhdWx0Ij4gQ29weXJpZ2h0IMKpIDIwMTggQ2l2aWNhIHwgPC9hPg0KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmd5bXBpZS5xbGQuZ292LmF1L2Rpc2NsYWltZXIiIHRhcmdldD0iX3BhcmVudCI+Q29weXJpZ2h0IGFuZCBEaXNjbGFpbWVyPC9hPg0KICAgICAgICAgICAgICAgIDxhIHN0eWxlPSJjdXJzb3I6ZGVmYXVsdCI+IHwgPC9hPg0KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmd5bXBpZS5xbGQuZ292LmF1L3ByaXZhY3ktc3RhdGVtZW50IiB0YXJnZXQ9Il9wYXJlbnQiPlByaXZhY3kgU3RhdGVtZW50PC9hPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2PiA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQoNCiAgICA8ZGl2IGlkPSJ0aXB0aXBfaG9sZGVyIiBzdHlsZT0ibWF4LXdpZHRoOjMwMHB4OyI+PGRpdiBpZD0idGlwdGlwX2Fycm93Ij48ZGl2IGlkPSJ0aXB0aXBfYXJyb3dfaW5uZXIiPjwvZGl2PjwvZGl2PjxkaXYgaWQ9InRpcHRpcF9jb250ZW50Ij48L2Rpdj48L2Rpdj4NCjwvYm9keT4NCg0KPHNjcmlwdCBhc3luYyBzcmM9Imh0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0YWcvanM/aWQ9VUEtMTIxNzczNzc3LTEiPjwvc2NyaXB0Pg0KPHNjcmlwdD4NCgl3aW5kb3cuZGF0YUxheWVyID0gd2luZG93LmRhdGFMYXllciB8fCBbXTsNCglmdW5jdGlvbiBndGFnKCl7ZGF0YUxheWVyLnB1c2goYXJndW1lbnRzKTt9DQoJZ3RhZygnanMnLCBuZXcgRGF0ZSgpKTsNCg0KCWd0YWcoJ2NvbmZpZycsICdVQS0xMjE3NzM3NzctMScpOw0KPC9zY3JpcHQ+DQo8L2h0bWw+DQo=
    http_version: 
  recorded_at: Mon, 13 May 2019 14:00:00 GMT
recorded_with: VCR 5.0.0
